BEGIN TRANSACTION;
CREATE TABLE `COMPILATION_UNIT` ( `id`   INTEGER NOT NULL PRIMARY KEY,`timestamp`    DATETIME NOT NULL, `cmd_args` TEXT NOT NULL, FOREIGN KEY(`id`) REFERENCES FILES(id) );
INSERT INTO "COMPILATION_UNIT" VALUES(7,1427387312,' cl.exe -c work/A.cpp -o2');
INSERT INTO "COMPILATION_UNIT" VALUES(10,1427215320,' cl.exe -c work/B.cpp -o2');
INSERT INTO "COMPILATION_UNIT" VALUES(17,1427461578,' cl.exe -c work/C.cpp -o2');
CREATE TABLE `FILES` ( `id`   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`number_of_lines` INTEGER,`path` TEXT NOT NULL);
INSERT INTO "FILES" VALUES(1,42,'work/temp/A.cpp');
INSERT INTO "FILES" VALUES(2,17,'work/temp/A.h');
INSERT INTO "FILES" VALUES(3,46,'work/temp/All.h');
INSERT INTO "FILES" VALUES(4,NULL,'work/temp/B.cpp');
INSERT INTO "FILES" VALUES(5,NULL,'work/temp/B.h');
INSERT INTO "FILES" VALUES(6,10,'work/temp/IncAll.h');
INSERT INTO "FILES" VALUES(7,NULL,'work/A.cpp');
INSERT INTO "FILES" VALUES(8,NULL,'work/A.h');
INSERT INTO "FILES" VALUES(9,NULL,'work/All.h');
INSERT INTO "FILES" VALUES(10,NULL,'work/B.cpp');
INSERT INTO "FILES" VALUES(11,NULL,'work/B.h');
INSERT INTO "FILES" VALUES(12,NULL,'work/IncAll.h');
INSERT INTO "FILES" VALUES(13,NULL,'work/OnlyA.h');
INSERT INTO "FILES" VALUES(14,NULL,'work/OnlyB.h');
INSERT INTO "FILES" VALUES(15,42,'work/temp/C.cpp');
INSERT INTO "FILES" VALUES(16,21,'work/temp/C.h');
INSERT INTO "FILES" VALUES(17,NULL,'work/C.cpp');
INSERT INTO "FILES" VALUES(18,NULL,'work/C.h');
INSERT INTO "FILES" VALUES(19,NULL,'work/OnlyC.h');
CREATE TABLE `LINES` (`id`   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`file_id`  INTEGER NOT NULL,`line`  INTEGER NOT NULL,`original_line`  INTEGER NOT NULL,FOREIGN KEY(`file_id`) REFERENCES FILES(id) );
INSERT INTO "LINES" VALUES(1669,4,18,17);
INSERT INTO "LINES" VALUES(1670,4,17,16);
INSERT INTO "LINES" VALUES(1671,4,16,15);
INSERT INTO "LINES" VALUES(1672,4,15,14);
INSERT INTO "LINES" VALUES(1673,4,14,13);
INSERT INTO "LINES" VALUES(1674,4,13,12);
INSERT INTO "LINES" VALUES(1675,4,12,11);
INSERT INTO "LINES" VALUES(1676,4,11,10);
INSERT INTO "LINES" VALUES(1677,4,10,9);
INSERT INTO "LINES" VALUES(1678,4,9,8);
INSERT INTO "LINES" VALUES(1679,4,8,7);
INSERT INTO "LINES" VALUES(1680,4,7,6);
INSERT INTO "LINES" VALUES(1681,4,6,5);
INSERT INTO "LINES" VALUES(1682,4,5,4);
INSERT INTO "LINES" VALUES(1683,4,4,3);
INSERT INTO "LINES" VALUES(1684,4,3,2);
INSERT INTO "LINES" VALUES(1685,4,2,1);
INSERT INTO "LINES" VALUES(1686,5,26,25);
INSERT INTO "LINES" VALUES(1687,5,25,24);
INSERT INTO "LINES" VALUES(1688,5,24,23);
INSERT INTO "LINES" VALUES(1689,5,23,22);
INSERT INTO "LINES" VALUES(1690,5,22,21);
INSERT INTO "LINES" VALUES(1691,5,21,20);
INSERT INTO "LINES" VALUES(1692,5,20,19);
INSERT INTO "LINES" VALUES(1693,5,19,18);
INSERT INTO "LINES" VALUES(1694,5,18,17);
INSERT INTO "LINES" VALUES(1695,5,17,16);
INSERT INTO "LINES" VALUES(1696,5,16,15);
INSERT INTO "LINES" VALUES(1697,5,15,14);
INSERT INTO "LINES" VALUES(1698,5,14,13);
INSERT INTO "LINES" VALUES(1699,5,13,12);
INSERT INTO "LINES" VALUES(1700,5,12,11);
INSERT INTO "LINES" VALUES(1701,5,11,10);
INSERT INTO "LINES" VALUES(1702,5,10,9);
INSERT INTO "LINES" VALUES(1703,5,9,8);
INSERT INTO "LINES" VALUES(1704,5,8,7);
INSERT INTO "LINES" VALUES(1705,5,7,6);
INSERT INTO "LINES" VALUES(1706,5,6,5);
INSERT INTO "LINES" VALUES(1707,5,5,4);
INSERT INTO "LINES" VALUES(1812,1,87,33);
INSERT INTO "LINES" VALUES(1813,1,86,32);
INSERT INTO "LINES" VALUES(1814,1,85,31);
INSERT INTO "LINES" VALUES(1815,1,84,30);
INSERT INTO "LINES" VALUES(1816,1,83,29);
INSERT INTO "LINES" VALUES(1817,1,82,28);
INSERT INTO "LINES" VALUES(1818,1,81,27);
INSERT INTO "LINES" VALUES(1819,1,80,26);
INSERT INTO "LINES" VALUES(1820,1,79,25);
INSERT INTO "LINES" VALUES(1821,1,78,26);
INSERT INTO "LINES" VALUES(1822,1,77,26);
INSERT INTO "LINES" VALUES(1823,1,76,26);
INSERT INTO "LINES" VALUES(1824,1,75,24);
INSERT INTO "LINES" VALUES(1825,1,74,23);
INSERT INTO "LINES" VALUES(1826,1,73,22);
INSERT INTO "LINES" VALUES(1827,1,72,23);
INSERT INTO "LINES" VALUES(1828,1,71,23);
INSERT INTO "LINES" VALUES(1829,1,70,23);
INSERT INTO "LINES" VALUES(1830,1,69,23);
INSERT INTO "LINES" VALUES(1831,1,68,23);
INSERT INTO "LINES" VALUES(1832,1,67,21);
INSERT INTO "LINES" VALUES(1833,1,66,20);
INSERT INTO "LINES" VALUES(1834,1,65,19);
INSERT INTO "LINES" VALUES(1835,1,64,18);
INSERT INTO "LINES" VALUES(1836,1,63,17);
INSERT INTO "LINES" VALUES(1837,1,62,16);
INSERT INTO "LINES" VALUES(1838,1,61,15);
INSERT INTO "LINES" VALUES(1839,1,60,14);
INSERT INTO "LINES" VALUES(1840,1,59,13);
INSERT INTO "LINES" VALUES(1841,1,58,12);
INSERT INTO "LINES" VALUES(1842,1,57,11);
INSERT INTO "LINES" VALUES(1843,1,56,10);
INSERT INTO "LINES" VALUES(1844,1,55,9);
INSERT INTO "LINES" VALUES(1845,1,54,8);
INSERT INTO "LINES" VALUES(1846,1,53,7);
INSERT INTO "LINES" VALUES(1847,1,52,6);
INSERT INTO "LINES" VALUES(1848,1,51,5);
INSERT INTO "LINES" VALUES(1849,1,50,4);
INSERT INTO "LINES" VALUES(1850,1,49,3);
INSERT INTO "LINES" VALUES(1851,1,48,2);
INSERT INTO "LINES" VALUES(1852,1,47,1);
INSERT INTO "LINES" VALUES(1853,1,46,1);
INSERT INTO "LINES" VALUES(1854,1,1,1);
INSERT INTO "LINES" VALUES(1855,1,2,1);
INSERT INTO "LINES" VALUES(1856,1,3,1);
INSERT INTO "LINES" VALUES(1857,1,4,1);
INSERT INTO "LINES" VALUES(1858,1,5,1);
INSERT INTO "LINES" VALUES(1859,1,6,1);
INSERT INTO "LINES" VALUES(1860,1,7,1);
INSERT INTO "LINES" VALUES(1861,1,8,1);
INSERT INTO "LINES" VALUES(1862,1,9,1);
INSERT INTO "LINES" VALUES(1863,1,10,1);
INSERT INTO "LINES" VALUES(1864,1,11,1);
INSERT INTO "LINES" VALUES(1865,1,12,1);
INSERT INTO "LINES" VALUES(1866,1,13,1);
INSERT INTO "LINES" VALUES(1867,1,14,1);
INSERT INTO "LINES" VALUES(1868,1,15,1);
INSERT INTO "LINES" VALUES(1869,1,16,1);
INSERT INTO "LINES" VALUES(1870,1,17,1);
INSERT INTO "LINES" VALUES(1871,1,18,1);
INSERT INTO "LINES" VALUES(1872,1,19,1);
INSERT INTO "LINES" VALUES(1873,1,20,1);
INSERT INTO "LINES" VALUES(1874,1,21,1);
INSERT INTO "LINES" VALUES(1875,1,22,1);
INSERT INTO "LINES" VALUES(1876,1,23,1);
INSERT INTO "LINES" VALUES(1877,1,24,1);
INSERT INTO "LINES" VALUES(1878,1,25,1);
INSERT INTO "LINES" VALUES(1879,1,26,1);
INSERT INTO "LINES" VALUES(1880,1,27,1);
INSERT INTO "LINES" VALUES(1881,1,28,1);
INSERT INTO "LINES" VALUES(1882,1,29,1);
INSERT INTO "LINES" VALUES(1883,1,30,1);
INSERT INTO "LINES" VALUES(1884,1,31,1);
INSERT INTO "LINES" VALUES(1885,1,32,1);
INSERT INTO "LINES" VALUES(1886,1,33,1);
INSERT INTO "LINES" VALUES(1887,1,34,1);
INSERT INTO "LINES" VALUES(1888,1,35,1);
INSERT INTO "LINES" VALUES(1889,1,36,1);
INSERT INTO "LINES" VALUES(1890,1,37,1);
INSERT INTO "LINES" VALUES(1891,1,38,1);
INSERT INTO "LINES" VALUES(1892,1,39,1);
INSERT INTO "LINES" VALUES(1893,1,40,1);
INSERT INTO "LINES" VALUES(1894,1,41,1);
INSERT INTO "LINES" VALUES(1895,1,42,1);
INSERT INTO "LINES" VALUES(1896,1,43,1);
INSERT INTO "LINES" VALUES(1897,1,44,1);
INSERT INTO "LINES" VALUES(1898,1,45,1);
INSERT INTO "LINES" VALUES(1996,2,62,16);
INSERT INTO "LINES" VALUES(1997,2,61,15);
INSERT INTO "LINES" VALUES(1998,2,60,14);
INSERT INTO "LINES" VALUES(1999,2,59,13);
INSERT INTO "LINES" VALUES(2000,2,58,12);
INSERT INTO "LINES" VALUES(2001,2,57,11);
INSERT INTO "LINES" VALUES(2002,2,56,10);
INSERT INTO "LINES" VALUES(2003,2,55,9);
INSERT INTO "LINES" VALUES(2004,2,54,8);
INSERT INTO "LINES" VALUES(2005,2,53,7);
INSERT INTO "LINES" VALUES(2006,2,52,6);
INSERT INTO "LINES" VALUES(2007,2,51,6);
INSERT INTO "LINES" VALUES(2008,2,50,5);
INSERT INTO "LINES" VALUES(2009,2,49,4);
INSERT INTO "LINES" VALUES(2010,2,48,3);
INSERT INTO "LINES" VALUES(2011,2,47,2);
INSERT INTO "LINES" VALUES(2012,2,46,1);
INSERT INTO "LINES" VALUES(2013,2,1,1);
INSERT INTO "LINES" VALUES(2014,2,2,1);
INSERT INTO "LINES" VALUES(2015,2,3,1);
INSERT INTO "LINES" VALUES(2016,2,4,1);
INSERT INTO "LINES" VALUES(2017,2,5,1);
INSERT INTO "LINES" VALUES(2018,2,6,1);
INSERT INTO "LINES" VALUES(2019,2,7,1);
INSERT INTO "LINES" VALUES(2020,2,8,1);
INSERT INTO "LINES" VALUES(2021,2,9,1);
INSERT INTO "LINES" VALUES(2022,2,10,1);
INSERT INTO "LINES" VALUES(2023,2,11,1);
INSERT INTO "LINES" VALUES(2024,2,12,1);
INSERT INTO "LINES" VALUES(2025,2,13,1);
INSERT INTO "LINES" VALUES(2026,2,14,1);
INSERT INTO "LINES" VALUES(2027,2,15,1);
INSERT INTO "LINES" VALUES(2028,2,16,1);
INSERT INTO "LINES" VALUES(2029,2,17,1);
INSERT INTO "LINES" VALUES(2030,2,18,1);
INSERT INTO "LINES" VALUES(2031,2,19,1);
INSERT INTO "LINES" VALUES(2032,2,20,1);
INSERT INTO "LINES" VALUES(2033,2,21,1);
INSERT INTO "LINES" VALUES(2034,2,22,1);
INSERT INTO "LINES" VALUES(2035,2,23,1);
INSERT INTO "LINES" VALUES(2036,2,24,1);
INSERT INTO "LINES" VALUES(2037,2,25,1);
INSERT INTO "LINES" VALUES(2038,2,26,1);
INSERT INTO "LINES" VALUES(2039,2,27,1);
INSERT INTO "LINES" VALUES(2040,2,28,1);
INSERT INTO "LINES" VALUES(2041,2,29,1);
INSERT INTO "LINES" VALUES(2042,2,30,1);
INSERT INTO "LINES" VALUES(2043,2,31,1);
INSERT INTO "LINES" VALUES(2044,2,32,1);
INSERT INTO "LINES" VALUES(2045,2,33,1);
INSERT INTO "LINES" VALUES(2046,2,34,1);
INSERT INTO "LINES" VALUES(2047,2,35,1);
INSERT INTO "LINES" VALUES(2048,2,36,1);
INSERT INTO "LINES" VALUES(2049,2,37,1);
INSERT INTO "LINES" VALUES(2050,2,38,1);
INSERT INTO "LINES" VALUES(2051,2,39,1);
INSERT INTO "LINES" VALUES(2052,2,40,1);
INSERT INTO "LINES" VALUES(2053,2,41,1);
INSERT INTO "LINES" VALUES(2054,2,42,1);
INSERT INTO "LINES" VALUES(2055,2,43,1);
INSERT INTO "LINES" VALUES(2056,2,44,1);
INSERT INTO "LINES" VALUES(2057,2,45,1);
INSERT INTO "LINES" VALUES(2133,16,21,20);
INSERT INTO "LINES" VALUES(2134,16,20,19);
INSERT INTO "LINES" VALUES(2135,16,19,18);
INSERT INTO "LINES" VALUES(2136,16,18,17);
INSERT INTO "LINES" VALUES(2137,16,17,16);
INSERT INTO "LINES" VALUES(2138,16,16,15);
INSERT INTO "LINES" VALUES(2139,16,15,14);
INSERT INTO "LINES" VALUES(2140,16,14,13);
INSERT INTO "LINES" VALUES(2141,16,13,12);
INSERT INTO "LINES" VALUES(2142,16,12,11);
INSERT INTO "LINES" VALUES(2143,16,11,10);
INSERT INTO "LINES" VALUES(2144,16,10,9);
INSERT INTO "LINES" VALUES(2145,16,9,8);
INSERT INTO "LINES" VALUES(2146,16,8,7);
INSERT INTO "LINES" VALUES(2147,16,7,6);
INSERT INTO "LINES" VALUES(2148,16,6,5);
INSERT INTO "LINES" VALUES(2149,16,5,4);
INSERT INTO "LINES" VALUES(2239,3,91,45);
INSERT INTO "LINES" VALUES(2240,3,90,44);
INSERT INTO "LINES" VALUES(2241,3,89,43);
INSERT INTO "LINES" VALUES(2242,3,88,42);
INSERT INTO "LINES" VALUES(2243,3,87,41);
INSERT INTO "LINES" VALUES(2244,3,86,40);
INSERT INTO "LINES" VALUES(2245,3,85,39);
INSERT INTO "LINES" VALUES(2246,3,84,38);
INSERT INTO "LINES" VALUES(2247,3,83,37);
INSERT INTO "LINES" VALUES(2248,3,82,36);
INSERT INTO "LINES" VALUES(2249,3,81,35);
INSERT INTO "LINES" VALUES(2250,3,80,34);
INSERT INTO "LINES" VALUES(2251,3,79,33);
INSERT INTO "LINES" VALUES(2252,3,78,32);
INSERT INTO "LINES" VALUES(2253,3,77,31);
INSERT INTO "LINES" VALUES(2254,3,76,30);
INSERT INTO "LINES" VALUES(2255,3,75,29);
INSERT INTO "LINES" VALUES(2256,3,74,28);
INSERT INTO "LINES" VALUES(2257,3,73,27);
INSERT INTO "LINES" VALUES(2258,3,72,26);
INSERT INTO "LINES" VALUES(2259,3,71,25);
INSERT INTO "LINES" VALUES(2260,3,70,24);
INSERT INTO "LINES" VALUES(2261,3,69,23);
INSERT INTO "LINES" VALUES(2262,3,68,22);
INSERT INTO "LINES" VALUES(2263,3,67,21);
INSERT INTO "LINES" VALUES(2264,3,66,20);
INSERT INTO "LINES" VALUES(2265,3,65,19);
INSERT INTO "LINES" VALUES(2266,3,64,18);
INSERT INTO "LINES" VALUES(2267,3,63,17);
INSERT INTO "LINES" VALUES(2268,3,62,16);
INSERT INTO "LINES" VALUES(2269,3,61,15);
INSERT INTO "LINES" VALUES(2270,3,60,14);
INSERT INTO "LINES" VALUES(2271,3,59,13);
INSERT INTO "LINES" VALUES(2272,3,58,12);
INSERT INTO "LINES" VALUES(2273,3,57,11);
INSERT INTO "LINES" VALUES(2274,3,56,10);
INSERT INTO "LINES" VALUES(2275,3,55,9);
INSERT INTO "LINES" VALUES(2276,3,54,8);
INSERT INTO "LINES" VALUES(2277,3,53,7);
INSERT INTO "LINES" VALUES(2278,3,52,6);
INSERT INTO "LINES" VALUES(2279,3,51,5);
INSERT INTO "LINES" VALUES(2280,3,50,4);
INSERT INTO "LINES" VALUES(2281,3,49,4);
INSERT INTO "LINES" VALUES(2282,3,48,3);
INSERT INTO "LINES" VALUES(2283,3,47,2);
INSERT INTO "LINES" VALUES(2284,3,46,1);
INSERT INTO "LINES" VALUES(2285,3,1,1);
INSERT INTO "LINES" VALUES(2286,3,2,1);
INSERT INTO "LINES" VALUES(2287,3,3,1);
INSERT INTO "LINES" VALUES(2288,3,4,1);
INSERT INTO "LINES" VALUES(2289,3,5,1);
INSERT INTO "LINES" VALUES(2290,3,6,1);
INSERT INTO "LINES" VALUES(2291,3,7,1);
INSERT INTO "LINES" VALUES(2292,3,8,1);
INSERT INTO "LINES" VALUES(2293,3,9,1);
INSERT INTO "LINES" VALUES(2294,3,10,1);
INSERT INTO "LINES" VALUES(2295,3,11,1);
INSERT INTO "LINES" VALUES(2296,3,12,1);
INSERT INTO "LINES" VALUES(2297,3,13,1);
INSERT INTO "LINES" VALUES(2298,3,14,1);
INSERT INTO "LINES" VALUES(2299,3,15,1);
INSERT INTO "LINES" VALUES(2300,3,16,1);
INSERT INTO "LINES" VALUES(2301,3,17,1);
INSERT INTO "LINES" VALUES(2302,3,18,1);
INSERT INTO "LINES" VALUES(2303,3,19,1);
INSERT INTO "LINES" VALUES(2304,3,20,1);
INSERT INTO "LINES" VALUES(2305,3,21,1);
INSERT INTO "LINES" VALUES(2306,3,22,1);
INSERT INTO "LINES" VALUES(2307,3,23,1);
INSERT INTO "LINES" VALUES(2308,3,24,1);
INSERT INTO "LINES" VALUES(2309,3,25,1);
INSERT INTO "LINES" VALUES(2310,3,26,1);
INSERT INTO "LINES" VALUES(2311,3,27,1);
INSERT INTO "LINES" VALUES(2312,3,28,1);
INSERT INTO "LINES" VALUES(2313,3,29,1);
INSERT INTO "LINES" VALUES(2314,3,30,1);
INSERT INTO "LINES" VALUES(2315,3,31,1);
INSERT INTO "LINES" VALUES(2316,3,32,1);
INSERT INTO "LINES" VALUES(2317,3,33,1);
INSERT INTO "LINES" VALUES(2318,3,34,1);
INSERT INTO "LINES" VALUES(2319,3,35,1);
INSERT INTO "LINES" VALUES(2320,3,36,1);
INSERT INTO "LINES" VALUES(2321,3,37,1);
INSERT INTO "LINES" VALUES(2322,3,38,1);
INSERT INTO "LINES" VALUES(2323,3,39,1);
INSERT INTO "LINES" VALUES(2324,3,40,1);
INSERT INTO "LINES" VALUES(2325,3,41,1);
INSERT INTO "LINES" VALUES(2326,3,42,1);
INSERT INTO "LINES" VALUES(2327,3,43,1);
INSERT INTO "LINES" VALUES(2328,3,44,1);
INSERT INTO "LINES" VALUES(2329,3,45,1);
INSERT INTO "LINES" VALUES(2330,15,87,33);
INSERT INTO "LINES" VALUES(2331,15,86,32);
INSERT INTO "LINES" VALUES(2332,15,85,31);
INSERT INTO "LINES" VALUES(2333,15,84,30);
INSERT INTO "LINES" VALUES(2334,15,83,31);
INSERT INTO "LINES" VALUES(2335,15,82,31);
INSERT INTO "LINES" VALUES(2336,15,81,31);
INSERT INTO "LINES" VALUES(2337,15,80,29);
INSERT INTO "LINES" VALUES(2338,15,79,28);
INSERT INTO "LINES" VALUES(2339,15,78,27);
INSERT INTO "LINES" VALUES(2340,15,77,28);
INSERT INTO "LINES" VALUES(2341,15,76,28);
INSERT INTO "LINES" VALUES(2342,15,75,28);
INSERT INTO "LINES" VALUES(2343,15,74,28);
INSERT INTO "LINES" VALUES(2344,15,73,28);
INSERT INTO "LINES" VALUES(2345,15,72,26);
INSERT INTO "LINES" VALUES(2346,15,71,25);
INSERT INTO "LINES" VALUES(2347,15,70,24);
INSERT INTO "LINES" VALUES(2348,15,69,23);
INSERT INTO "LINES" VALUES(2349,15,68,22);
INSERT INTO "LINES" VALUES(2350,15,67,21);
INSERT INTO "LINES" VALUES(2351,15,66,20);
INSERT INTO "LINES" VALUES(2352,15,65,19);
INSERT INTO "LINES" VALUES(2353,15,64,18);
INSERT INTO "LINES" VALUES(2354,15,63,17);
INSERT INTO "LINES" VALUES(2355,15,62,16);
INSERT INTO "LINES" VALUES(2356,15,61,15);
INSERT INTO "LINES" VALUES(2357,15,60,14);
INSERT INTO "LINES" VALUES(2358,15,59,13);
INSERT INTO "LINES" VALUES(2359,15,58,12);
INSERT INTO "LINES" VALUES(2360,15,57,11);
INSERT INTO "LINES" VALUES(2361,15,56,10);
INSERT INTO "LINES" VALUES(2362,15,55,9);
INSERT INTO "LINES" VALUES(2363,15,54,8);
INSERT INTO "LINES" VALUES(2364,15,53,7);
INSERT INTO "LINES" VALUES(2365,15,52,6);
INSERT INTO "LINES" VALUES(2366,15,51,5);
INSERT INTO "LINES" VALUES(2367,15,50,4);
INSERT INTO "LINES" VALUES(2368,15,49,3);
INSERT INTO "LINES" VALUES(2369,15,48,2);
INSERT INTO "LINES" VALUES(2370,15,47,1);
INSERT INTO "LINES" VALUES(2371,15,46,1);
INSERT INTO "LINES" VALUES(2372,15,1,1);
INSERT INTO "LINES" VALUES(2373,15,2,1);
INSERT INTO "LINES" VALUES(2374,15,3,1);
INSERT INTO "LINES" VALUES(2375,15,4,1);
INSERT INTO "LINES" VALUES(2376,15,5,1);
INSERT INTO "LINES" VALUES(2377,15,6,1);
INSERT INTO "LINES" VALUES(2378,15,7,1);
INSERT INTO "LINES" VALUES(2379,15,8,1);
INSERT INTO "LINES" VALUES(2380,15,9,1);
INSERT INTO "LINES" VALUES(2381,15,10,1);
INSERT INTO "LINES" VALUES(2382,15,11,1);
INSERT INTO "LINES" VALUES(2383,15,12,1);
INSERT INTO "LINES" VALUES(2384,15,13,1);
INSERT INTO "LINES" VALUES(2385,15,14,1);
INSERT INTO "LINES" VALUES(2386,15,15,1);
INSERT INTO "LINES" VALUES(2387,15,16,1);
INSERT INTO "LINES" VALUES(2388,15,17,1);
INSERT INTO "LINES" VALUES(2389,15,18,1);
INSERT INTO "LINES" VALUES(2390,15,19,1);
INSERT INTO "LINES" VALUES(2391,15,20,1);
INSERT INTO "LINES" VALUES(2392,15,21,1);
INSERT INTO "LINES" VALUES(2393,15,22,1);
INSERT INTO "LINES" VALUES(2394,15,23,1);
INSERT INTO "LINES" VALUES(2395,15,24,1);
INSERT INTO "LINES" VALUES(2396,15,25,1);
INSERT INTO "LINES" VALUES(2397,15,26,1);
INSERT INTO "LINES" VALUES(2398,15,27,1);
INSERT INTO "LINES" VALUES(2399,15,28,1);
INSERT INTO "LINES" VALUES(2400,15,29,1);
INSERT INTO "LINES" VALUES(2401,15,30,1);
INSERT INTO "LINES" VALUES(2402,15,31,1);
INSERT INTO "LINES" VALUES(2403,15,32,1);
INSERT INTO "LINES" VALUES(2404,15,33,1);
INSERT INTO "LINES" VALUES(2405,15,34,1);
INSERT INTO "LINES" VALUES(2406,15,35,1);
INSERT INTO "LINES" VALUES(2407,15,36,1);
INSERT INTO "LINES" VALUES(2408,15,37,1);
INSERT INTO "LINES" VALUES(2409,15,38,1);
INSERT INTO "LINES" VALUES(2410,15,39,1);
INSERT INTO "LINES" VALUES(2411,15,40,1);
INSERT INTO "LINES" VALUES(2412,15,41,1);
INSERT INTO "LINES" VALUES(2413,15,42,1);
INSERT INTO "LINES" VALUES(2414,15,43,1);
INSERT INTO "LINES" VALUES(2415,15,44,1);
INSERT INTO "LINES" VALUES(2416,15,45,1);
INSERT INTO "LINES" VALUES(2417,6,55,1);
INSERT INTO "LINES" VALUES(2418,6,54,1);
INSERT INTO "LINES" VALUES(2419,6,53,1);
INSERT INTO "LINES" VALUES(2420,6,52,1);
INSERT INTO "LINES" VALUES(2421,6,51,1);
INSERT INTO "LINES" VALUES(2422,6,50,1);
INSERT INTO "LINES" VALUES(2423,6,49,1);
INSERT INTO "LINES" VALUES(2424,6,48,1);
INSERT INTO "LINES" VALUES(2425,6,47,1);
INSERT INTO "LINES" VALUES(2426,6,46,1);
INSERT INTO "LINES" VALUES(2427,6,1,1);
INSERT INTO "LINES" VALUES(2428,6,2,1);
INSERT INTO "LINES" VALUES(2429,6,3,1);
INSERT INTO "LINES" VALUES(2430,6,4,1);
INSERT INTO "LINES" VALUES(2431,6,5,1);
INSERT INTO "LINES" VALUES(2432,6,6,1);
INSERT INTO "LINES" VALUES(2433,6,7,1);
INSERT INTO "LINES" VALUES(2434,6,8,1);
INSERT INTO "LINES" VALUES(2435,6,9,1);
INSERT INTO "LINES" VALUES(2436,6,10,1);
INSERT INTO "LINES" VALUES(2437,6,11,1);
INSERT INTO "LINES" VALUES(2438,6,12,1);
INSERT INTO "LINES" VALUES(2439,6,13,1);
INSERT INTO "LINES" VALUES(2440,6,14,1);
INSERT INTO "LINES" VALUES(2441,6,15,1);
INSERT INTO "LINES" VALUES(2442,6,16,1);
INSERT INTO "LINES" VALUES(2443,6,17,1);
INSERT INTO "LINES" VALUES(2444,6,18,1);
INSERT INTO "LINES" VALUES(2445,6,19,1);
INSERT INTO "LINES" VALUES(2446,6,20,1);
INSERT INTO "LINES" VALUES(2447,6,21,1);
INSERT INTO "LINES" VALUES(2448,6,22,1);
INSERT INTO "LINES" VALUES(2449,6,23,1);
INSERT INTO "LINES" VALUES(2450,6,24,1);
INSERT INTO "LINES" VALUES(2451,6,25,1);
INSERT INTO "LINES" VALUES(2452,6,26,1);
INSERT INTO "LINES" VALUES(2453,6,27,1);
INSERT INTO "LINES" VALUES(2454,6,28,1);
INSERT INTO "LINES" VALUES(2455,6,29,1);
INSERT INTO "LINES" VALUES(2456,6,30,1);
INSERT INTO "LINES" VALUES(2457,6,31,1);
INSERT INTO "LINES" VALUES(2458,6,32,1);
INSERT INTO "LINES" VALUES(2459,6,33,1);
INSERT INTO "LINES" VALUES(2460,6,34,1);
INSERT INTO "LINES" VALUES(2461,6,35,1);
INSERT INTO "LINES" VALUES(2462,6,36,1);
INSERT INTO "LINES" VALUES(2463,6,37,1);
INSERT INTO "LINES" VALUES(2464,6,38,1);
INSERT INTO "LINES" VALUES(2465,6,39,1);
INSERT INTO "LINES" VALUES(2466,6,40,1);
INSERT INTO "LINES" VALUES(2467,6,41,1);
INSERT INTO "LINES" VALUES(2468,6,42,1);
INSERT INTO "LINES" VALUES(2469,6,43,1);
INSERT INTO "LINES" VALUES(2470,6,44,1);
INSERT INTO "LINES" VALUES(2471,6,45,1);
CREATE TABLE `LINES_REPLACEMENTS` (`line_id`  INTEGER NOT NULL,`replacement_id`  INTEGER NOT NULL,PRIMARY KEY(line_id, replacement_id), FOREIGN KEY(`line_id`) REFERENCES LINES(id), FOREIGN KEY(`replacement_id`) REFERENCES REPLACEMENTS(id) );
CREATE TABLE `RELATIONS` (`file_id`  INTEGER NOT NULL,`dep_id`   INTEGER NOT NULL,`dependency_timestamp` DATETIME NOT NULL,PRIMARY KEY(file_id, dep_id), FOREIGN KEY(`file_id`) REFERENCES FILES(id), FOREIGN KEY(`dep_id`) REFERENCES FILES(id) );
INSERT INTO "RELATIONS" VALUES(7,8,1427218226);
INSERT INTO "RELATIONS" VALUES(7,9,1427463481);
INSERT INTO "RELATIONS" VALUES(7,12,1427220376);
INSERT INTO "RELATIONS" VALUES(7,13,1427397043);
INSERT INTO "RELATIONS" VALUES(10,9,1427463481);
INSERT INTO "RELATIONS" VALUES(10,11,1427218446);
INSERT INTO "RELATIONS" VALUES(10,12,1427220376);
INSERT INTO "RELATIONS" VALUES(10,14,1427214610);
INSERT INTO "RELATIONS" VALUES(17,9,1427463481);
INSERT INTO "RELATIONS" VALUES(17,18,1427461573);
INSERT INTO "RELATIONS" VALUES(17,12,1427220376);
INSERT INTO "RELATIONS" VALUES(17,19,1427212284);
CREATE TABLE `REPLACEMENTS` (`id`  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`file_id`   INTEGER NOT NULL,`start_line` INTEGER NOT NULL,`lines_replaced` INTEGER NOT NULL,`lines_in_replacement` INTEGER NOT NULL,`comes_from_start_line` INTEGER NOT NULL,`comes_from_end_line` INTEGER NOT NULL,`comes_from_file_id` INTEGER NOT NULL,`transformation_id` INTEGER NOT NULL,`unhandled` INTEGER DEFAULT(1),`replacement_text` TEXT NOT NULL,FOREIGN KEY(`file_id`) REFERENCES FILES(id), FOREIGN KEY(`comes_from_file_id`) REFERENCES FILES(id), FOREIGN KEY(`transformation_id`) REFERENCES TRANSFORMATIONS(id) );
INSERT INTO "REPLACEMENTS" VALUES(1,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(2,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(3,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(4,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(5,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(6,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(7,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(8,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(9,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(10,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(11,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(12,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(13,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(14,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(15,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(16,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(17,15,26,0,5,26,26,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(18,15,29,0,3,29,29,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(19,15,30,0,0,30,30,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(20,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(21,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(22,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(23,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(24,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(25,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(26,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(27,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(28,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(29,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(30,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(31,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(32,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(33,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(34,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(35,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(36,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(37,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(38,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(39,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(40,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(41,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(42,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(43,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(44,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(45,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(46,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(47,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(48,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(49,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(50,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(51,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(52,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(53,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(54,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(55,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(56,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(57,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(58,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(59,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(60,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(61,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(62,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(63,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(64,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(65,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(66,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(67,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(68,16,1,0,45,1,1,16,9,1,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(69,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
CREATE TABLE `TRANSFORMATIONS` (`id`  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`name` TEXT NOT NULL);
INSERT INTO "TRANSFORMATIONS" VALUES(1,'MultipleTransforms');
INSERT INTO "TRANSFORMATIONS" VALUES(9,'ReplaceRvalueRef');
DELETE FROM "sqlite_sequence";
INSERT INTO "sqlite_sequence" VALUES('FILES',19);
INSERT INTO "sqlite_sequence" VALUES('LINES',2471);
INSERT INTO "sqlite_sequence" VALUES('TRANSFORMATIONS',69);
INSERT INTO "sqlite_sequence" VALUES('REPLACEMENTS',69);
CREATE UNIQUE INDEX FILES_INDEX ON FILES (path);
CREATE UNIQUE INDEX FILES_INDEX_ID ON FILES (id);
CREATE UNIQUE INDEX COMP_UNIT_INDEX ON COMPILATION_UNIT (id);
CREATE INDEX RELATIONS_INDEX ON RELATIONS (file_id, dep_id);
CREATE UNIQUE INDEX TRANSFORMATIONS_INDEX_NAME ON TRANSFORMATIONS (name);
CREATE UNIQUE INDEX TRANSFORMATIONS_INDEX_ID ON TRANSFORMATIONS (id);
CREATE UNIQUE INDEX REPLACEMENT_INDEX_4 ON REPLACEMENTS (id, file_id, start_line, lines_replaced, replacement_text);
CREATE UNIQUE INDEX REPLACEMENT_INDEX_1 ON REPLACEMENTS (id);
CREATE INDEX REPLACEMENT_INDEX_3 ON REPLACEMENTS (transformation_id);
CREATE INDEX REPLACEMENT_INDEX_2 ON REPLACEMENTS (file_id);
CREATE UNIQUE INDEX LINES_INDEX_FILE_ID_LINE ON LINES (file_id, line);
CREATE UNIQUE INDEX LINES_INDEX_ID ON LINES (id);
CREATE UNIQUE INDEX LINES_REPLACEMENTS_INDEX_LINE_ID_REPLACEMENT_ID ON LINES_REPLACEMENTS (line_id, replacement_id);
CREATE INDEX LINES_REPLACEMENTS_INDEX_REPLACEMENT_ID ON LINES_REPLACEMENTS (replacement_id);
CREATE INDEX LINES_REPLACEMENTS_INDEX_ID ON LINES_REPLACEMENTS (line_id);
COMMIT;