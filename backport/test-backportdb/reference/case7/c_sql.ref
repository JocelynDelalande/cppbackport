BEGIN TRANSACTION;
CREATE TABLE `COMPILATION_UNIT` ( `id`   INTEGER NOT NULL PRIMARY KEY,`timestamp`    DATETIME NOT NULL, `cmd_args` TEXT NOT NULL, FOREIGN KEY(`id`) REFERENCES FILES(id) );
INSERT INTO "COMPILATION_UNIT" VALUES(7,1427387312,' cl.exe -c work/A.cpp -o2');
INSERT INTO "COMPILATION_UNIT" VALUES(10,1427215320,' cl.exe -c work/B.cpp -o2');
INSERT INTO "COMPILATION_UNIT" VALUES(17,1427461578,' cl.exe -c work/C.cpp -o2');
CREATE TABLE `FILES` ( `id`   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`number_of_lines` INTEGER,`path` TEXT NOT NULL);
INSERT INTO "FILES" VALUES(1,42,'work/temp/A.cpp');
INSERT INTO "FILES" VALUES(2,18,'work/temp/A.h');
INSERT INTO "FILES" VALUES(3,36,'work/temp/All.h');
INSERT INTO "FILES" VALUES(4,NULL,'work/temp/B.cpp');
INSERT INTO "FILES" VALUES(5,NULL,'work/temp/B.h');
INSERT INTO "FILES" VALUES(6,10,'work/temp/IncAll.h');
INSERT INTO "FILES" VALUES(7,NULL,'work/A.cpp');
INSERT INTO "FILES" VALUES(8,NULL,'work/A.h');
INSERT INTO "FILES" VALUES(9,NULL,'work/All.h');
INSERT INTO "FILES" VALUES(10,NULL,'work/B.cpp');
INSERT INTO "FILES" VALUES(11,NULL,'work/B.h');
INSERT INTO "FILES" VALUES(12,NULL,'work/IncAll.h');
INSERT INTO "FILES" VALUES(13,NULL,'work/OnlyA.h');
INSERT INTO "FILES" VALUES(14,NULL,'work/OnlyB.h');
INSERT INTO "FILES" VALUES(15,42,'work/temp/C.cpp');
INSERT INTO "FILES" VALUES(16,21,'work/temp/C.h');
INSERT INTO "FILES" VALUES(17,NULL,'work/C.cpp');
INSERT INTO "FILES" VALUES(18,NULL,'work/C.h');
INSERT INTO "FILES" VALUES(19,NULL,'work/OnlyC.h');
CREATE TABLE `LINES` (`id`   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`file_id`  INTEGER NOT NULL,`line`  INTEGER NOT NULL,`original_line`  INTEGER NOT NULL,FOREIGN KEY(`file_id`) REFERENCES FILES(id) );
INSERT INTO "LINES" VALUES(4239,4,18,17);
INSERT INTO "LINES" VALUES(4240,4,17,16);
INSERT INTO "LINES" VALUES(4241,4,16,15);
INSERT INTO "LINES" VALUES(4242,4,15,14);
INSERT INTO "LINES" VALUES(4243,4,14,13);
INSERT INTO "LINES" VALUES(4244,4,13,12);
INSERT INTO "LINES" VALUES(4245,4,12,11);
INSERT INTO "LINES" VALUES(4246,4,11,10);
INSERT INTO "LINES" VALUES(4247,4,10,9);
INSERT INTO "LINES" VALUES(4248,4,9,8);
INSERT INTO "LINES" VALUES(4249,4,8,7);
INSERT INTO "LINES" VALUES(4250,4,7,6);
INSERT INTO "LINES" VALUES(4251,4,6,5);
INSERT INTO "LINES" VALUES(4252,4,5,4);
INSERT INTO "LINES" VALUES(4253,4,4,3);
INSERT INTO "LINES" VALUES(4254,4,3,2);
INSERT INTO "LINES" VALUES(4255,4,2,1);
INSERT INTO "LINES" VALUES(4256,5,26,25);
INSERT INTO "LINES" VALUES(4257,5,25,24);
INSERT INTO "LINES" VALUES(4258,5,24,23);
INSERT INTO "LINES" VALUES(4259,5,23,22);
INSERT INTO "LINES" VALUES(4260,5,22,21);
INSERT INTO "LINES" VALUES(4261,5,21,20);
INSERT INTO "LINES" VALUES(4262,5,20,19);
INSERT INTO "LINES" VALUES(4263,5,19,18);
INSERT INTO "LINES" VALUES(4264,5,18,17);
INSERT INTO "LINES" VALUES(4265,5,17,16);
INSERT INTO "LINES" VALUES(4266,5,16,15);
INSERT INTO "LINES" VALUES(4267,5,15,14);
INSERT INTO "LINES" VALUES(4268,5,14,13);
INSERT INTO "LINES" VALUES(4269,5,13,12);
INSERT INTO "LINES" VALUES(4270,5,12,11);
INSERT INTO "LINES" VALUES(4271,5,11,10);
INSERT INTO "LINES" VALUES(4272,5,10,9);
INSERT INTO "LINES" VALUES(4273,5,9,8);
INSERT INTO "LINES" VALUES(4274,5,8,7);
INSERT INTO "LINES" VALUES(4275,5,7,6);
INSERT INTO "LINES" VALUES(4276,5,6,5);
INSERT INTO "LINES" VALUES(4277,5,5,4);
INSERT INTO "LINES" VALUES(4382,1,87,33);
INSERT INTO "LINES" VALUES(4383,1,86,32);
INSERT INTO "LINES" VALUES(4384,1,85,31);
INSERT INTO "LINES" VALUES(4385,1,84,30);
INSERT INTO "LINES" VALUES(4386,1,83,29);
INSERT INTO "LINES" VALUES(4387,1,82,28);
INSERT INTO "LINES" VALUES(4388,1,81,27);
INSERT INTO "LINES" VALUES(4389,1,80,26);
INSERT INTO "LINES" VALUES(4390,1,79,25);
INSERT INTO "LINES" VALUES(4391,1,78,26);
INSERT INTO "LINES" VALUES(4392,1,77,26);
INSERT INTO "LINES" VALUES(4393,1,76,26);
INSERT INTO "LINES" VALUES(4394,1,75,24);
INSERT INTO "LINES" VALUES(4395,1,74,23);
INSERT INTO "LINES" VALUES(4396,1,73,22);
INSERT INTO "LINES" VALUES(4397,1,72,23);
INSERT INTO "LINES" VALUES(4398,1,71,23);
INSERT INTO "LINES" VALUES(4399,1,70,23);
INSERT INTO "LINES" VALUES(4400,1,69,23);
INSERT INTO "LINES" VALUES(4401,1,68,23);
INSERT INTO "LINES" VALUES(4402,1,67,21);
INSERT INTO "LINES" VALUES(4403,1,66,20);
INSERT INTO "LINES" VALUES(4404,1,65,19);
INSERT INTO "LINES" VALUES(4405,1,64,18);
INSERT INTO "LINES" VALUES(4406,1,63,17);
INSERT INTO "LINES" VALUES(4407,1,62,16);
INSERT INTO "LINES" VALUES(4408,1,61,15);
INSERT INTO "LINES" VALUES(4409,1,60,14);
INSERT INTO "LINES" VALUES(4410,1,59,13);
INSERT INTO "LINES" VALUES(4411,1,58,12);
INSERT INTO "LINES" VALUES(4412,1,57,11);
INSERT INTO "LINES" VALUES(4413,1,56,10);
INSERT INTO "LINES" VALUES(4414,1,55,9);
INSERT INTO "LINES" VALUES(4415,1,54,8);
INSERT INTO "LINES" VALUES(4416,1,53,7);
INSERT INTO "LINES" VALUES(4417,1,52,6);
INSERT INTO "LINES" VALUES(4418,1,51,5);
INSERT INTO "LINES" VALUES(4419,1,50,4);
INSERT INTO "LINES" VALUES(4420,1,49,3);
INSERT INTO "LINES" VALUES(4421,1,48,2);
INSERT INTO "LINES" VALUES(4422,1,47,1);
INSERT INTO "LINES" VALUES(4423,1,46,1);
INSERT INTO "LINES" VALUES(4424,1,1,1);
INSERT INTO "LINES" VALUES(4425,1,2,1);
INSERT INTO "LINES" VALUES(4426,1,3,1);
INSERT INTO "LINES" VALUES(4427,1,4,1);
INSERT INTO "LINES" VALUES(4428,1,5,1);
INSERT INTO "LINES" VALUES(4429,1,6,1);
INSERT INTO "LINES" VALUES(4430,1,7,1);
INSERT INTO "LINES" VALUES(4431,1,8,1);
INSERT INTO "LINES" VALUES(4432,1,9,1);
INSERT INTO "LINES" VALUES(4433,1,10,1);
INSERT INTO "LINES" VALUES(4434,1,11,1);
INSERT INTO "LINES" VALUES(4435,1,12,1);
INSERT INTO "LINES" VALUES(4436,1,13,1);
INSERT INTO "LINES" VALUES(4437,1,14,1);
INSERT INTO "LINES" VALUES(4438,1,15,1);
INSERT INTO "LINES" VALUES(4439,1,16,1);
INSERT INTO "LINES" VALUES(4440,1,17,1);
INSERT INTO "LINES" VALUES(4441,1,18,1);
INSERT INTO "LINES" VALUES(4442,1,19,1);
INSERT INTO "LINES" VALUES(4443,1,20,1);
INSERT INTO "LINES" VALUES(4444,1,21,1);
INSERT INTO "LINES" VALUES(4445,1,22,1);
INSERT INTO "LINES" VALUES(4446,1,23,1);
INSERT INTO "LINES" VALUES(4447,1,24,1);
INSERT INTO "LINES" VALUES(4448,1,25,1);
INSERT INTO "LINES" VALUES(4449,1,26,1);
INSERT INTO "LINES" VALUES(4450,1,27,1);
INSERT INTO "LINES" VALUES(4451,1,28,1);
INSERT INTO "LINES" VALUES(4452,1,29,1);
INSERT INTO "LINES" VALUES(4453,1,30,1);
INSERT INTO "LINES" VALUES(4454,1,31,1);
INSERT INTO "LINES" VALUES(4455,1,32,1);
INSERT INTO "LINES" VALUES(4456,1,33,1);
INSERT INTO "LINES" VALUES(4457,1,34,1);
INSERT INTO "LINES" VALUES(4458,1,35,1);
INSERT INTO "LINES" VALUES(4459,1,36,1);
INSERT INTO "LINES" VALUES(4460,1,37,1);
INSERT INTO "LINES" VALUES(4461,1,38,1);
INSERT INTO "LINES" VALUES(4462,1,39,1);
INSERT INTO "LINES" VALUES(4463,1,40,1);
INSERT INTO "LINES" VALUES(4464,1,41,1);
INSERT INTO "LINES" VALUES(4465,1,42,1);
INSERT INTO "LINES" VALUES(4466,1,43,1);
INSERT INTO "LINES" VALUES(4467,1,44,1);
INSERT INTO "LINES" VALUES(4468,1,45,1);
INSERT INTO "LINES" VALUES(4556,2,63,17);
INSERT INTO "LINES" VALUES(4557,2,62,16);
INSERT INTO "LINES" VALUES(4558,2,61,15);
INSERT INTO "LINES" VALUES(4559,2,60,14);
INSERT INTO "LINES" VALUES(4560,2,59,13);
INSERT INTO "LINES" VALUES(4561,2,58,12);
INSERT INTO "LINES" VALUES(4562,2,57,11);
INSERT INTO "LINES" VALUES(4563,2,56,10);
INSERT INTO "LINES" VALUES(4564,2,55,9);
INSERT INTO "LINES" VALUES(4565,2,54,8);
INSERT INTO "LINES" VALUES(4566,2,53,7);
INSERT INTO "LINES" VALUES(4567,2,52,6);
INSERT INTO "LINES" VALUES(4568,2,51,6);
INSERT INTO "LINES" VALUES(4569,2,50,5);
INSERT INTO "LINES" VALUES(4570,2,49,4);
INSERT INTO "LINES" VALUES(4571,2,48,3);
INSERT INTO "LINES" VALUES(4572,2,47,2);
INSERT INTO "LINES" VALUES(4573,2,46,1);
INSERT INTO "LINES" VALUES(4574,2,1,1);
INSERT INTO "LINES" VALUES(4575,2,2,1);
INSERT INTO "LINES" VALUES(4576,2,3,1);
INSERT INTO "LINES" VALUES(4577,2,4,1);
INSERT INTO "LINES" VALUES(4578,2,5,1);
INSERT INTO "LINES" VALUES(4579,2,6,1);
INSERT INTO "LINES" VALUES(4580,2,7,1);
INSERT INTO "LINES" VALUES(4581,2,8,1);
INSERT INTO "LINES" VALUES(4582,2,9,1);
INSERT INTO "LINES" VALUES(4583,2,10,1);
INSERT INTO "LINES" VALUES(4584,2,11,1);
INSERT INTO "LINES" VALUES(4585,2,12,1);
INSERT INTO "LINES" VALUES(4586,2,13,1);
INSERT INTO "LINES" VALUES(4587,2,14,1);
INSERT INTO "LINES" VALUES(4588,2,15,1);
INSERT INTO "LINES" VALUES(4589,2,16,1);
INSERT INTO "LINES" VALUES(4590,2,17,1);
INSERT INTO "LINES" VALUES(4591,2,18,1);
INSERT INTO "LINES" VALUES(4592,2,19,1);
INSERT INTO "LINES" VALUES(4593,2,20,1);
INSERT INTO "LINES" VALUES(4594,2,21,1);
INSERT INTO "LINES" VALUES(4595,2,22,1);
INSERT INTO "LINES" VALUES(4596,2,23,1);
INSERT INTO "LINES" VALUES(4597,2,24,1);
INSERT INTO "LINES" VALUES(4598,2,25,1);
INSERT INTO "LINES" VALUES(4599,2,26,1);
INSERT INTO "LINES" VALUES(4600,2,27,1);
INSERT INTO "LINES" VALUES(4601,2,28,1);
INSERT INTO "LINES" VALUES(4602,2,29,1);
INSERT INTO "LINES" VALUES(4603,2,30,1);
INSERT INTO "LINES" VALUES(4604,2,31,1);
INSERT INTO "LINES" VALUES(4605,2,32,1);
INSERT INTO "LINES" VALUES(4606,2,33,1);
INSERT INTO "LINES" VALUES(4607,2,34,1);
INSERT INTO "LINES" VALUES(4608,2,35,1);
INSERT INTO "LINES" VALUES(4609,2,36,1);
INSERT INTO "LINES" VALUES(4610,2,37,1);
INSERT INTO "LINES" VALUES(4611,2,38,1);
INSERT INTO "LINES" VALUES(4612,2,39,1);
INSERT INTO "LINES" VALUES(4613,2,40,1);
INSERT INTO "LINES" VALUES(4614,2,41,1);
INSERT INTO "LINES" VALUES(4615,2,42,1);
INSERT INTO "LINES" VALUES(4616,2,43,1);
INSERT INTO "LINES" VALUES(4617,2,44,1);
INSERT INTO "LINES" VALUES(4618,2,45,1);
INSERT INTO "LINES" VALUES(4684,16,21,20);
INSERT INTO "LINES" VALUES(4685,16,20,19);
INSERT INTO "LINES" VALUES(4686,16,19,18);
INSERT INTO "LINES" VALUES(4687,16,18,17);
INSERT INTO "LINES" VALUES(4688,16,17,16);
INSERT INTO "LINES" VALUES(4689,16,16,15);
INSERT INTO "LINES" VALUES(4690,16,15,14);
INSERT INTO "LINES" VALUES(4691,16,14,13);
INSERT INTO "LINES" VALUES(4692,16,13,12);
INSERT INTO "LINES" VALUES(4693,16,12,11);
INSERT INTO "LINES" VALUES(4694,16,11,10);
INSERT INTO "LINES" VALUES(4695,16,10,9);
INSERT INTO "LINES" VALUES(4696,16,9,8);
INSERT INTO "LINES" VALUES(4697,16,8,7);
INSERT INTO "LINES" VALUES(4698,16,7,6);
INSERT INTO "LINES" VALUES(4699,16,6,5);
INSERT INTO "LINES" VALUES(4700,16,5,4);
INSERT INTO "LINES" VALUES(4790,3,81,35);
INSERT INTO "LINES" VALUES(4791,3,80,34);
INSERT INTO "LINES" VALUES(4792,3,79,33);
INSERT INTO "LINES" VALUES(4793,3,78,32);
INSERT INTO "LINES" VALUES(4794,3,77,31);
INSERT INTO "LINES" VALUES(4795,3,76,30);
INSERT INTO "LINES" VALUES(4796,3,75,29);
INSERT INTO "LINES" VALUES(4797,3,74,28);
INSERT INTO "LINES" VALUES(4798,3,73,27);
INSERT INTO "LINES" VALUES(4799,3,72,26);
INSERT INTO "LINES" VALUES(4800,3,71,25);
INSERT INTO "LINES" VALUES(4801,3,70,24);
INSERT INTO "LINES" VALUES(4802,3,69,23);
INSERT INTO "LINES" VALUES(4803,3,68,22);
INSERT INTO "LINES" VALUES(4804,3,67,21);
INSERT INTO "LINES" VALUES(4805,3,66,20);
INSERT INTO "LINES" VALUES(4806,3,65,19);
INSERT INTO "LINES" VALUES(4807,3,64,18);
INSERT INTO "LINES" VALUES(4808,3,63,17);
INSERT INTO "LINES" VALUES(4809,3,62,16);
INSERT INTO "LINES" VALUES(4810,3,61,15);
INSERT INTO "LINES" VALUES(4811,3,60,14);
INSERT INTO "LINES" VALUES(4812,3,59,13);
INSERT INTO "LINES" VALUES(4813,3,58,12);
INSERT INTO "LINES" VALUES(4814,3,57,11);
INSERT INTO "LINES" VALUES(4815,3,56,10);
INSERT INTO "LINES" VALUES(4816,3,55,9);
INSERT INTO "LINES" VALUES(4817,3,54,8);
INSERT INTO "LINES" VALUES(4818,3,53,7);
INSERT INTO "LINES" VALUES(4819,3,52,6);
INSERT INTO "LINES" VALUES(4820,3,51,5);
INSERT INTO "LINES" VALUES(4821,3,50,4);
INSERT INTO "LINES" VALUES(4822,3,49,4);
INSERT INTO "LINES" VALUES(4823,3,48,3);
INSERT INTO "LINES" VALUES(4824,3,47,2);
INSERT INTO "LINES" VALUES(4825,3,46,1);
INSERT INTO "LINES" VALUES(4826,3,1,1);
INSERT INTO "LINES" VALUES(4827,3,2,1);
INSERT INTO "LINES" VALUES(4828,3,3,1);
INSERT INTO "LINES" VALUES(4829,3,4,1);
INSERT INTO "LINES" VALUES(4830,3,5,1);
INSERT INTO "LINES" VALUES(4831,3,6,1);
INSERT INTO "LINES" VALUES(4832,3,7,1);
INSERT INTO "LINES" VALUES(4833,3,8,1);
INSERT INTO "LINES" VALUES(4834,3,9,1);
INSERT INTO "LINES" VALUES(4835,3,10,1);
INSERT INTO "LINES" VALUES(4836,3,11,1);
INSERT INTO "LINES" VALUES(4837,3,12,1);
INSERT INTO "LINES" VALUES(4838,3,13,1);
INSERT INTO "LINES" VALUES(4839,3,14,1);
INSERT INTO "LINES" VALUES(4840,3,15,1);
INSERT INTO "LINES" VALUES(4841,3,16,1);
INSERT INTO "LINES" VALUES(4842,3,17,1);
INSERT INTO "LINES" VALUES(4843,3,18,1);
INSERT INTO "LINES" VALUES(4844,3,19,1);
INSERT INTO "LINES" VALUES(4845,3,20,1);
INSERT INTO "LINES" VALUES(4846,3,21,1);
INSERT INTO "LINES" VALUES(4847,3,22,1);
INSERT INTO "LINES" VALUES(4848,3,23,1);
INSERT INTO "LINES" VALUES(4849,3,24,1);
INSERT INTO "LINES" VALUES(4850,3,25,1);
INSERT INTO "LINES" VALUES(4851,3,26,1);
INSERT INTO "LINES" VALUES(4852,3,27,1);
INSERT INTO "LINES" VALUES(4853,3,28,1);
INSERT INTO "LINES" VALUES(4854,3,29,1);
INSERT INTO "LINES" VALUES(4855,3,30,1);
INSERT INTO "LINES" VALUES(4856,3,31,1);
INSERT INTO "LINES" VALUES(4857,3,32,1);
INSERT INTO "LINES" VALUES(4858,3,33,1);
INSERT INTO "LINES" VALUES(4859,3,34,1);
INSERT INTO "LINES" VALUES(4860,3,35,1);
INSERT INTO "LINES" VALUES(4861,3,36,1);
INSERT INTO "LINES" VALUES(4862,3,37,1);
INSERT INTO "LINES" VALUES(4863,3,38,1);
INSERT INTO "LINES" VALUES(4864,3,39,1);
INSERT INTO "LINES" VALUES(4865,3,40,1);
INSERT INTO "LINES" VALUES(4866,3,41,1);
INSERT INTO "LINES" VALUES(4867,3,42,1);
INSERT INTO "LINES" VALUES(4868,3,43,1);
INSERT INTO "LINES" VALUES(4869,3,44,1);
INSERT INTO "LINES" VALUES(4870,3,45,1);
INSERT INTO "LINES" VALUES(4871,15,87,33);
INSERT INTO "LINES" VALUES(4872,15,86,32);
INSERT INTO "LINES" VALUES(4873,15,85,31);
INSERT INTO "LINES" VALUES(4874,15,84,30);
INSERT INTO "LINES" VALUES(4875,15,83,31);
INSERT INTO "LINES" VALUES(4876,15,82,31);
INSERT INTO "LINES" VALUES(4877,15,81,31);
INSERT INTO "LINES" VALUES(4878,15,80,29);
INSERT INTO "LINES" VALUES(4879,15,79,28);
INSERT INTO "LINES" VALUES(4880,15,78,27);
INSERT INTO "LINES" VALUES(4881,15,77,28);
INSERT INTO "LINES" VALUES(4882,15,76,28);
INSERT INTO "LINES" VALUES(4883,15,75,28);
INSERT INTO "LINES" VALUES(4884,15,74,28);
INSERT INTO "LINES" VALUES(4885,15,73,28);
INSERT INTO "LINES" VALUES(4886,15,72,26);
INSERT INTO "LINES" VALUES(4887,15,71,25);
INSERT INTO "LINES" VALUES(4888,15,70,24);
INSERT INTO "LINES" VALUES(4889,15,69,23);
INSERT INTO "LINES" VALUES(4890,15,68,22);
INSERT INTO "LINES" VALUES(4891,15,67,21);
INSERT INTO "LINES" VALUES(4892,15,66,20);
INSERT INTO "LINES" VALUES(4893,15,65,19);
INSERT INTO "LINES" VALUES(4894,15,64,18);
INSERT INTO "LINES" VALUES(4895,15,63,17);
INSERT INTO "LINES" VALUES(4896,15,62,16);
INSERT INTO "LINES" VALUES(4897,15,61,15);
INSERT INTO "LINES" VALUES(4898,15,60,14);
INSERT INTO "LINES" VALUES(4899,15,59,13);
INSERT INTO "LINES" VALUES(4900,15,58,12);
INSERT INTO "LINES" VALUES(4901,15,57,11);
INSERT INTO "LINES" VALUES(4902,15,56,10);
INSERT INTO "LINES" VALUES(4903,15,55,9);
INSERT INTO "LINES" VALUES(4904,15,54,8);
INSERT INTO "LINES" VALUES(4905,15,53,7);
INSERT INTO "LINES" VALUES(4906,15,52,6);
INSERT INTO "LINES" VALUES(4907,15,51,5);
INSERT INTO "LINES" VALUES(4908,15,50,4);
INSERT INTO "LINES" VALUES(4909,15,49,3);
INSERT INTO "LINES" VALUES(4910,15,48,2);
INSERT INTO "LINES" VALUES(4911,15,47,1);
INSERT INTO "LINES" VALUES(4912,15,46,1);
INSERT INTO "LINES" VALUES(4913,15,1,1);
INSERT INTO "LINES" VALUES(4914,15,2,1);
INSERT INTO "LINES" VALUES(4915,15,3,1);
INSERT INTO "LINES" VALUES(4916,15,4,1);
INSERT INTO "LINES" VALUES(4917,15,5,1);
INSERT INTO "LINES" VALUES(4918,15,6,1);
INSERT INTO "LINES" VALUES(4919,15,7,1);
INSERT INTO "LINES" VALUES(4920,15,8,1);
INSERT INTO "LINES" VALUES(4921,15,9,1);
INSERT INTO "LINES" VALUES(4922,15,10,1);
INSERT INTO "LINES" VALUES(4923,15,11,1);
INSERT INTO "LINES" VALUES(4924,15,12,1);
INSERT INTO "LINES" VALUES(4925,15,13,1);
INSERT INTO "LINES" VALUES(4926,15,14,1);
INSERT INTO "LINES" VALUES(4927,15,15,1);
INSERT INTO "LINES" VALUES(4928,15,16,1);
INSERT INTO "LINES" VALUES(4929,15,17,1);
INSERT INTO "LINES" VALUES(4930,15,18,1);
INSERT INTO "LINES" VALUES(4931,15,19,1);
INSERT INTO "LINES" VALUES(4932,15,20,1);
INSERT INTO "LINES" VALUES(4933,15,21,1);
INSERT INTO "LINES" VALUES(4934,15,22,1);
INSERT INTO "LINES" VALUES(4935,15,23,1);
INSERT INTO "LINES" VALUES(4936,15,24,1);
INSERT INTO "LINES" VALUES(4937,15,25,1);
INSERT INTO "LINES" VALUES(4938,15,26,1);
INSERT INTO "LINES" VALUES(4939,15,27,1);
INSERT INTO "LINES" VALUES(4940,15,28,1);
INSERT INTO "LINES" VALUES(4941,15,29,1);
INSERT INTO "LINES" VALUES(4942,15,30,1);
INSERT INTO "LINES" VALUES(4943,15,31,1);
INSERT INTO "LINES" VALUES(4944,15,32,1);
INSERT INTO "LINES" VALUES(4945,15,33,1);
INSERT INTO "LINES" VALUES(4946,15,34,1);
INSERT INTO "LINES" VALUES(4947,15,35,1);
INSERT INTO "LINES" VALUES(4948,15,36,1);
INSERT INTO "LINES" VALUES(4949,15,37,1);
INSERT INTO "LINES" VALUES(4950,15,38,1);
INSERT INTO "LINES" VALUES(4951,15,39,1);
INSERT INTO "LINES" VALUES(4952,15,40,1);
INSERT INTO "LINES" VALUES(4953,15,41,1);
INSERT INTO "LINES" VALUES(4954,15,42,1);
INSERT INTO "LINES" VALUES(4955,15,43,1);
INSERT INTO "LINES" VALUES(4956,15,44,1);
INSERT INTO "LINES" VALUES(4957,15,45,1);
INSERT INTO "LINES" VALUES(4958,6,55,1);
INSERT INTO "LINES" VALUES(4959,6,54,1);
INSERT INTO "LINES" VALUES(4960,6,53,1);
INSERT INTO "LINES" VALUES(4961,6,52,1);
INSERT INTO "LINES" VALUES(4962,6,51,1);
INSERT INTO "LINES" VALUES(4963,6,50,1);
INSERT INTO "LINES" VALUES(4964,6,49,1);
INSERT INTO "LINES" VALUES(4965,6,48,1);
INSERT INTO "LINES" VALUES(4966,6,47,1);
INSERT INTO "LINES" VALUES(4967,6,46,1);
INSERT INTO "LINES" VALUES(4968,6,1,1);
INSERT INTO "LINES" VALUES(4969,6,2,1);
INSERT INTO "LINES" VALUES(4970,6,3,1);
INSERT INTO "LINES" VALUES(4971,6,4,1);
INSERT INTO "LINES" VALUES(4972,6,5,1);
INSERT INTO "LINES" VALUES(4973,6,6,1);
INSERT INTO "LINES" VALUES(4974,6,7,1);
INSERT INTO "LINES" VALUES(4975,6,8,1);
INSERT INTO "LINES" VALUES(4976,6,9,1);
INSERT INTO "LINES" VALUES(4977,6,10,1);
INSERT INTO "LINES" VALUES(4978,6,11,1);
INSERT INTO "LINES" VALUES(4979,6,12,1);
INSERT INTO "LINES" VALUES(4980,6,13,1);
INSERT INTO "LINES" VALUES(4981,6,14,1);
INSERT INTO "LINES" VALUES(4982,6,15,1);
INSERT INTO "LINES" VALUES(4983,6,16,1);
INSERT INTO "LINES" VALUES(4984,6,17,1);
INSERT INTO "LINES" VALUES(4985,6,18,1);
INSERT INTO "LINES" VALUES(4986,6,19,1);
INSERT INTO "LINES" VALUES(4987,6,20,1);
INSERT INTO "LINES" VALUES(4988,6,21,1);
INSERT INTO "LINES" VALUES(4989,6,22,1);
INSERT INTO "LINES" VALUES(4990,6,23,1);
INSERT INTO "LINES" VALUES(4991,6,24,1);
INSERT INTO "LINES" VALUES(4992,6,25,1);
INSERT INTO "LINES" VALUES(4993,6,26,1);
INSERT INTO "LINES" VALUES(4994,6,27,1);
INSERT INTO "LINES" VALUES(4995,6,28,1);
INSERT INTO "LINES" VALUES(4996,6,29,1);
INSERT INTO "LINES" VALUES(4997,6,30,1);
INSERT INTO "LINES" VALUES(4998,6,31,1);
INSERT INTO "LINES" VALUES(4999,6,32,1);
INSERT INTO "LINES" VALUES(5000,6,33,1);
INSERT INTO "LINES" VALUES(5001,6,34,1);
INSERT INTO "LINES" VALUES(5002,6,35,1);
INSERT INTO "LINES" VALUES(5003,6,36,1);
INSERT INTO "LINES" VALUES(5004,6,37,1);
INSERT INTO "LINES" VALUES(5005,6,38,1);
INSERT INTO "LINES" VALUES(5006,6,39,1);
INSERT INTO "LINES" VALUES(5007,6,40,1);
INSERT INTO "LINES" VALUES(5008,6,41,1);
INSERT INTO "LINES" VALUES(5009,6,42,1);
INSERT INTO "LINES" VALUES(5010,6,43,1);
INSERT INTO "LINES" VALUES(5011,6,44,1);
INSERT INTO "LINES" VALUES(5012,6,45,1);
CREATE TABLE `LINES_REPLACEMENTS` (`line_id`  INTEGER NOT NULL,`replacement_id`  INTEGER NOT NULL,PRIMARY KEY(line_id, replacement_id), FOREIGN KEY(`line_id`) REFERENCES LINES(id), FOREIGN KEY(`replacement_id`) REFERENCES REPLACEMENTS(id) );
CREATE TABLE `RELATIONS` (`file_id`  INTEGER NOT NULL,`dep_id`   INTEGER NOT NULL,`dependency_timestamp` DATETIME NOT NULL,PRIMARY KEY(file_id, dep_id), FOREIGN KEY(`file_id`) REFERENCES FILES(id), FOREIGN KEY(`dep_id`) REFERENCES FILES(id) );
INSERT INTO "RELATIONS" VALUES(7,8,1427729547);
INSERT INTO "RELATIONS" VALUES(7,9,1427732250);
INSERT INTO "RELATIONS" VALUES(7,12,1427220376);
INSERT INTO "RELATIONS" VALUES(7,13,1427397043);
INSERT INTO "RELATIONS" VALUES(10,9,1427732250);
INSERT INTO "RELATIONS" VALUES(10,11,1427218446);
INSERT INTO "RELATIONS" VALUES(10,12,1427220376);
INSERT INTO "RELATIONS" VALUES(10,14,1427214610);
INSERT INTO "RELATIONS" VALUES(17,9,1427732250);
INSERT INTO "RELATIONS" VALUES(17,18,1427732235);
INSERT INTO "RELATIONS" VALUES(17,12,1427220376);
INSERT INTO "RELATIONS" VALUES(17,19,1427212284);
CREATE TABLE `REPLACEMENTS` (`id`  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`file_id`   INTEGER NOT NULL,`start_line` INTEGER NOT NULL,`lines_replaced` INTEGER NOT NULL,`lines_in_replacement` INTEGER NOT NULL,`comes_from_start_line` INTEGER NOT NULL,`comes_from_end_line` INTEGER NOT NULL,`comes_from_file_id` INTEGER NOT NULL,`transformation_id` INTEGER NOT NULL,`unhandled` INTEGER DEFAULT(1),`replacement_text` TEXT NOT NULL,FOREIGN KEY(`file_id`) REFERENCES FILES(id), FOREIGN KEY(`comes_from_file_id`) REFERENCES FILES(id), FOREIGN KEY(`transformation_id`) REFERENCES TRANSFORMATIONS(id) );
INSERT INTO "REPLACEMENTS" VALUES(1,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(2,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(3,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(4,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(5,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(6,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(7,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(8,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(9,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(10,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(11,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(12,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(13,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(14,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(15,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(16,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(17,15,26,0,5,26,26,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(18,15,29,0,3,29,29,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(19,15,30,0,0,30,30,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(20,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(21,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(22,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(23,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(24,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(25,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(26,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(27,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(28,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(29,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(30,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(31,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(32,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(33,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(34,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(35,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(36,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(37,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(38,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(39,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(40,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(41,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(42,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(43,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(44,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(45,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(46,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(47,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(48,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(49,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(50,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(51,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(52,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(53,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(54,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(55,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(56,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(57,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(58,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(59,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(60,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(61,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(62,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(63,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(64,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(65,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(66,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(67,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(68,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(69,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(70,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(71,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(72,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(73,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(74,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(75,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(76,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(77,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(78,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(79,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(80,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(81,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(82,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(83,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(84,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(85,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(86,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(87,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(88,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(89,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(90,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(91,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(92,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(93,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(94,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(95,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(96,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(97,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(98,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(99,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(100,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(101,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(102,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(103,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(104,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(105,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(106,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(107,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(108,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(109,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(110,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(111,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(112,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(113,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(114,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(115,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(116,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(117,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(118,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(119,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(120,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(121,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(122,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(123,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(124,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(125,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(126,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(127,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(128,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(129,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(130,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(131,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(132,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(133,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(134,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(135,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(136,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(137,16,1,0,45,1,1,16,9,1,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(138,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
CREATE TABLE `TRANSFORMATIONS` (`id`  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`name` TEXT NOT NULL);
INSERT INTO "TRANSFORMATIONS" VALUES(1,'MultipleTransforms');
INSERT INTO "TRANSFORMATIONS" VALUES(9,'ReplaceRvalueRef');
DELETE FROM "sqlite_sequence";
INSERT INTO "sqlite_sequence" VALUES('FILES',19);
INSERT INTO "sqlite_sequence" VALUES('LINES',5012);
INSERT INTO "sqlite_sequence" VALUES('TRANSFORMATIONS',138);
INSERT INTO "sqlite_sequence" VALUES('REPLACEMENTS',138);
CREATE UNIQUE INDEX FILES_INDEX ON FILES (path);
CREATE UNIQUE INDEX FILES_INDEX_ID ON FILES (id);
CREATE UNIQUE INDEX COMP_UNIT_INDEX ON COMPILATION_UNIT (id);
CREATE INDEX RELATIONS_INDEX ON RELATIONS (file_id, dep_id);
CREATE UNIQUE INDEX TRANSFORMATIONS_INDEX_NAME ON TRANSFORMATIONS (name);
CREATE UNIQUE INDEX TRANSFORMATIONS_INDEX_ID ON TRANSFORMATIONS (id);
CREATE UNIQUE INDEX REPLACEMENT_INDEX_4 ON REPLACEMENTS (id, file_id, start_line, lines_replaced, replacement_text);
CREATE UNIQUE INDEX REPLACEMENT_INDEX_1 ON REPLACEMENTS (id);
CREATE INDEX REPLACEMENT_INDEX_3 ON REPLACEMENTS (transformation_id);
CREATE INDEX REPLACEMENT_INDEX_2 ON REPLACEMENTS (file_id);
CREATE UNIQUE INDEX LINES_INDEX_FILE_ID_LINE ON LINES (file_id, line);
CREATE UNIQUE INDEX LINES_INDEX_ID ON LINES (id);
CREATE UNIQUE INDEX LINES_REPLACEMENTS_INDEX_LINE_ID_REPLACEMENT_ID ON LINES_REPLACEMENTS (line_id, replacement_id);
CREATE INDEX LINES_REPLACEMENTS_INDEX_REPLACEMENT_ID ON LINES_REPLACEMENTS (replacement_id);
CREATE INDEX LINES_REPLACEMENTS_INDEX_ID ON LINES_REPLACEMENTS (line_id);
COMMIT;