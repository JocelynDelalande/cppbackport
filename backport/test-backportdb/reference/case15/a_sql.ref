BEGIN TRANSACTION;
CREATE TABLE `COMPILATION_UNIT` ( `id`   INTEGER NOT NULL PRIMARY KEY,`timestamp`    DATETIME NOT NULL, `cmd_args` TEXT NOT NULL, FOREIGN KEY(`id`) REFERENCES FILES(id) );
INSERT INTO "COMPILATION_UNIT" VALUES(7,1427387312,' cl.exe -c work/A.cpp -o2');
INSERT INTO "COMPILATION_UNIT" VALUES(10,1427215320,' cl.exe -c work/B.cpp -o2');
INSERT INTO "COMPILATION_UNIT" VALUES(17,1427461578,' cl.exe -c work/C.cpp -o2');
CREATE TABLE `FILES` ( `id`   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`number_of_lines` INTEGER,`path` TEXT NOT NULL);
INSERT INTO "FILES" VALUES(1,42,'work/temp/A.cpp');
INSERT INTO "FILES" VALUES(2,21,'work/temp/A.h');
INSERT INTO "FILES" VALUES(3,36,'work/temp/All.h');
INSERT INTO "FILES" VALUES(4,NULL,'work/temp/B.cpp');
INSERT INTO "FILES" VALUES(5,NULL,'work/temp/B.h');
INSERT INTO "FILES" VALUES(6,10,'work/temp/IncAll.h');
INSERT INTO "FILES" VALUES(7,NULL,'work/A.cpp');
INSERT INTO "FILES" VALUES(8,NULL,'work/A.h');
INSERT INTO "FILES" VALUES(9,NULL,'work/All.h');
INSERT INTO "FILES" VALUES(10,NULL,'work/B.cpp');
INSERT INTO "FILES" VALUES(11,NULL,'work/B.h');
INSERT INTO "FILES" VALUES(12,NULL,'work/IncAll.h');
INSERT INTO "FILES" VALUES(13,NULL,'work/OnlyA.h');
INSERT INTO "FILES" VALUES(14,NULL,'work/OnlyB.h');
INSERT INTO "FILES" VALUES(15,42,'work/temp/C.cpp');
INSERT INTO "FILES" VALUES(16,24,'work/temp/C.h');
INSERT INTO "FILES" VALUES(17,NULL,'work/C.cpp');
INSERT INTO "FILES" VALUES(18,NULL,'work/C.h');
INSERT INTO "FILES" VALUES(19,NULL,'work/OnlyC.h');
INSERT INTO "FILES" VALUES(20,12,'work/temp/AllNew.h');
INSERT INTO "FILES" VALUES(21,NULL,'work/AllNew.h');
INSERT INTO "FILES" VALUES(22,12,'work/temp/newDir/AllNew.h');
INSERT INTO "FILES" VALUES(23,NULL,'work/newDir/AllNew.h');
CREATE TABLE `LINES` (`id`   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`file_id`  INTEGER NOT NULL,`line`  INTEGER NOT NULL,`original_line`  INTEGER NOT NULL,FOREIGN KEY(`file_id`) REFERENCES FILES(id) );
INSERT INTO "LINES" VALUES(6640,6,55,1);
INSERT INTO "LINES" VALUES(6641,6,54,1);
INSERT INTO "LINES" VALUES(6642,6,53,1);
INSERT INTO "LINES" VALUES(6643,6,52,1);
INSERT INTO "LINES" VALUES(6644,6,51,1);
INSERT INTO "LINES" VALUES(6645,6,50,1);
INSERT INTO "LINES" VALUES(6646,6,49,1);
INSERT INTO "LINES" VALUES(6647,6,48,1);
INSERT INTO "LINES" VALUES(6648,6,47,1);
INSERT INTO "LINES" VALUES(6649,6,46,1);
INSERT INTO "LINES" VALUES(6650,6,1,1);
INSERT INTO "LINES" VALUES(6651,6,2,1);
INSERT INTO "LINES" VALUES(6652,6,3,1);
INSERT INTO "LINES" VALUES(6653,6,4,1);
INSERT INTO "LINES" VALUES(6654,6,5,1);
INSERT INTO "LINES" VALUES(6655,6,6,1);
INSERT INTO "LINES" VALUES(6656,6,7,1);
INSERT INTO "LINES" VALUES(6657,6,8,1);
INSERT INTO "LINES" VALUES(6658,6,9,1);
INSERT INTO "LINES" VALUES(6659,6,10,1);
INSERT INTO "LINES" VALUES(6660,6,11,1);
INSERT INTO "LINES" VALUES(6661,6,12,1);
INSERT INTO "LINES" VALUES(6662,6,13,1);
INSERT INTO "LINES" VALUES(6663,6,14,1);
INSERT INTO "LINES" VALUES(6664,6,15,1);
INSERT INTO "LINES" VALUES(6665,6,16,1);
INSERT INTO "LINES" VALUES(6666,6,17,1);
INSERT INTO "LINES" VALUES(6667,6,18,1);
INSERT INTO "LINES" VALUES(6668,6,19,1);
INSERT INTO "LINES" VALUES(6669,6,20,1);
INSERT INTO "LINES" VALUES(6670,6,21,1);
INSERT INTO "LINES" VALUES(6671,6,22,1);
INSERT INTO "LINES" VALUES(6672,6,23,1);
INSERT INTO "LINES" VALUES(6673,6,24,1);
INSERT INTO "LINES" VALUES(6674,6,25,1);
INSERT INTO "LINES" VALUES(6675,6,26,1);
INSERT INTO "LINES" VALUES(6676,6,27,1);
INSERT INTO "LINES" VALUES(6677,6,28,1);
INSERT INTO "LINES" VALUES(6678,6,29,1);
INSERT INTO "LINES" VALUES(6679,6,30,1);
INSERT INTO "LINES" VALUES(6680,6,31,1);
INSERT INTO "LINES" VALUES(6681,6,32,1);
INSERT INTO "LINES" VALUES(6682,6,33,1);
INSERT INTO "LINES" VALUES(6683,6,34,1);
INSERT INTO "LINES" VALUES(6684,6,35,1);
INSERT INTO "LINES" VALUES(6685,6,36,1);
INSERT INTO "LINES" VALUES(6686,6,37,1);
INSERT INTO "LINES" VALUES(6687,6,38,1);
INSERT INTO "LINES" VALUES(6688,6,39,1);
INSERT INTO "LINES" VALUES(6689,6,40,1);
INSERT INTO "LINES" VALUES(6690,6,41,1);
INSERT INTO "LINES" VALUES(6691,6,42,1);
INSERT INTO "LINES" VALUES(6692,6,43,1);
INSERT INTO "LINES" VALUES(6693,6,44,1);
INSERT INTO "LINES" VALUES(6694,6,45,1);
INSERT INTO "LINES" VALUES(8167,20,57,1);
INSERT INTO "LINES" VALUES(8168,20,56,1);
INSERT INTO "LINES" VALUES(8169,20,55,1);
INSERT INTO "LINES" VALUES(8170,20,54,1);
INSERT INTO "LINES" VALUES(8171,20,53,1);
INSERT INTO "LINES" VALUES(8172,20,52,1);
INSERT INTO "LINES" VALUES(8173,20,51,1);
INSERT INTO "LINES" VALUES(8174,20,50,1);
INSERT INTO "LINES" VALUES(8175,20,49,1);
INSERT INTO "LINES" VALUES(8176,20,48,1);
INSERT INTO "LINES" VALUES(8177,20,47,1);
INSERT INTO "LINES" VALUES(8178,20,46,1);
INSERT INTO "LINES" VALUES(8179,20,1,1);
INSERT INTO "LINES" VALUES(8180,20,2,1);
INSERT INTO "LINES" VALUES(8181,20,3,1);
INSERT INTO "LINES" VALUES(8182,20,4,1);
INSERT INTO "LINES" VALUES(8183,20,5,1);
INSERT INTO "LINES" VALUES(8184,20,6,1);
INSERT INTO "LINES" VALUES(8185,20,7,1);
INSERT INTO "LINES" VALUES(8186,20,8,1);
INSERT INTO "LINES" VALUES(8187,20,9,1);
INSERT INTO "LINES" VALUES(8188,20,10,1);
INSERT INTO "LINES" VALUES(8189,20,11,1);
INSERT INTO "LINES" VALUES(8190,20,12,1);
INSERT INTO "LINES" VALUES(8191,20,13,1);
INSERT INTO "LINES" VALUES(8192,20,14,1);
INSERT INTO "LINES" VALUES(8193,20,15,1);
INSERT INTO "LINES" VALUES(8194,20,16,1);
INSERT INTO "LINES" VALUES(8195,20,17,1);
INSERT INTO "LINES" VALUES(8196,20,18,1);
INSERT INTO "LINES" VALUES(8197,20,19,1);
INSERT INTO "LINES" VALUES(8198,20,20,1);
INSERT INTO "LINES" VALUES(8199,20,21,1);
INSERT INTO "LINES" VALUES(8200,20,22,1);
INSERT INTO "LINES" VALUES(8201,20,23,1);
INSERT INTO "LINES" VALUES(8202,20,24,1);
INSERT INTO "LINES" VALUES(8203,20,25,1);
INSERT INTO "LINES" VALUES(8204,20,26,1);
INSERT INTO "LINES" VALUES(8205,20,27,1);
INSERT INTO "LINES" VALUES(8206,20,28,1);
INSERT INTO "LINES" VALUES(8207,20,29,1);
INSERT INTO "LINES" VALUES(8208,20,30,1);
INSERT INTO "LINES" VALUES(8209,20,31,1);
INSERT INTO "LINES" VALUES(8210,20,32,1);
INSERT INTO "LINES" VALUES(8211,20,33,1);
INSERT INTO "LINES" VALUES(8212,20,34,1);
INSERT INTO "LINES" VALUES(8213,20,35,1);
INSERT INTO "LINES" VALUES(8214,20,36,1);
INSERT INTO "LINES" VALUES(8215,20,37,1);
INSERT INTO "LINES" VALUES(8216,20,38,1);
INSERT INTO "LINES" VALUES(8217,20,39,1);
INSERT INTO "LINES" VALUES(8218,20,40,1);
INSERT INTO "LINES" VALUES(8219,20,41,1);
INSERT INTO "LINES" VALUES(8220,20,42,1);
INSERT INTO "LINES" VALUES(8221,20,43,1);
INSERT INTO "LINES" VALUES(8222,20,44,1);
INSERT INTO "LINES" VALUES(8223,20,45,1);
INSERT INTO "LINES" VALUES(9040,22,57,1);
INSERT INTO "LINES" VALUES(9041,22,56,1);
INSERT INTO "LINES" VALUES(9042,22,55,1);
INSERT INTO "LINES" VALUES(9043,22,54,1);
INSERT INTO "LINES" VALUES(9044,22,53,1);
INSERT INTO "LINES" VALUES(9045,22,52,1);
INSERT INTO "LINES" VALUES(9046,22,51,1);
INSERT INTO "LINES" VALUES(9047,22,50,1);
INSERT INTO "LINES" VALUES(9048,22,49,1);
INSERT INTO "LINES" VALUES(9049,22,48,1);
INSERT INTO "LINES" VALUES(9050,22,47,1);
INSERT INTO "LINES" VALUES(9051,22,46,1);
INSERT INTO "LINES" VALUES(9052,22,1,1);
INSERT INTO "LINES" VALUES(9053,22,2,1);
INSERT INTO "LINES" VALUES(9054,22,3,1);
INSERT INTO "LINES" VALUES(9055,22,4,1);
INSERT INTO "LINES" VALUES(9056,22,5,1);
INSERT INTO "LINES" VALUES(9057,22,6,1);
INSERT INTO "LINES" VALUES(9058,22,7,1);
INSERT INTO "LINES" VALUES(9059,22,8,1);
INSERT INTO "LINES" VALUES(9060,22,9,1);
INSERT INTO "LINES" VALUES(9061,22,10,1);
INSERT INTO "LINES" VALUES(9062,22,11,1);
INSERT INTO "LINES" VALUES(9063,22,12,1);
INSERT INTO "LINES" VALUES(9064,22,13,1);
INSERT INTO "LINES" VALUES(9065,22,14,1);
INSERT INTO "LINES" VALUES(9066,22,15,1);
INSERT INTO "LINES" VALUES(9067,22,16,1);
INSERT INTO "LINES" VALUES(9068,22,17,1);
INSERT INTO "LINES" VALUES(9069,22,18,1);
INSERT INTO "LINES" VALUES(9070,22,19,1);
INSERT INTO "LINES" VALUES(9071,22,20,1);
INSERT INTO "LINES" VALUES(9072,22,21,1);
INSERT INTO "LINES" VALUES(9073,22,22,1);
INSERT INTO "LINES" VALUES(9074,22,23,1);
INSERT INTO "LINES" VALUES(9075,22,24,1);
INSERT INTO "LINES" VALUES(9076,22,25,1);
INSERT INTO "LINES" VALUES(9077,22,26,1);
INSERT INTO "LINES" VALUES(9078,22,27,1);
INSERT INTO "LINES" VALUES(9079,22,28,1);
INSERT INTO "LINES" VALUES(9080,22,29,1);
INSERT INTO "LINES" VALUES(9081,22,30,1);
INSERT INTO "LINES" VALUES(9082,22,31,1);
INSERT INTO "LINES" VALUES(9083,22,32,1);
INSERT INTO "LINES" VALUES(9084,22,33,1);
INSERT INTO "LINES" VALUES(9085,22,34,1);
INSERT INTO "LINES" VALUES(9086,22,35,1);
INSERT INTO "LINES" VALUES(9087,22,36,1);
INSERT INTO "LINES" VALUES(9088,22,37,1);
INSERT INTO "LINES" VALUES(9089,22,38,1);
INSERT INTO "LINES" VALUES(9090,22,39,1);
INSERT INTO "LINES" VALUES(9091,22,40,1);
INSERT INTO "LINES" VALUES(9092,22,41,1);
INSERT INTO "LINES" VALUES(9093,22,42,1);
INSERT INTO "LINES" VALUES(9094,22,43,1);
INSERT INTO "LINES" VALUES(9095,22,44,1);
INSERT INTO "LINES" VALUES(9096,22,45,1);
INSERT INTO "LINES" VALUES(9097,15,87,33);
INSERT INTO "LINES" VALUES(9098,15,86,32);
INSERT INTO "LINES" VALUES(9099,15,85,31);
INSERT INTO "LINES" VALUES(9100,15,84,30);
INSERT INTO "LINES" VALUES(9101,15,83,31);
INSERT INTO "LINES" VALUES(9102,15,82,31);
INSERT INTO "LINES" VALUES(9103,15,81,31);
INSERT INTO "LINES" VALUES(9104,15,80,29);
INSERT INTO "LINES" VALUES(9105,15,79,28);
INSERT INTO "LINES" VALUES(9106,15,78,27);
INSERT INTO "LINES" VALUES(9107,15,77,28);
INSERT INTO "LINES" VALUES(9108,15,76,28);
INSERT INTO "LINES" VALUES(9109,15,75,28);
INSERT INTO "LINES" VALUES(9110,15,74,28);
INSERT INTO "LINES" VALUES(9111,15,73,28);
INSERT INTO "LINES" VALUES(9112,15,72,26);
INSERT INTO "LINES" VALUES(9113,15,71,25);
INSERT INTO "LINES" VALUES(9114,15,70,24);
INSERT INTO "LINES" VALUES(9115,15,69,23);
INSERT INTO "LINES" VALUES(9116,15,68,22);
INSERT INTO "LINES" VALUES(9117,15,67,21);
INSERT INTO "LINES" VALUES(9118,15,66,20);
INSERT INTO "LINES" VALUES(9119,15,65,19);
INSERT INTO "LINES" VALUES(9120,15,64,18);
INSERT INTO "LINES" VALUES(9121,15,63,17);
INSERT INTO "LINES" VALUES(9122,15,62,16);
INSERT INTO "LINES" VALUES(9123,15,61,15);
INSERT INTO "LINES" VALUES(9124,15,60,14);
INSERT INTO "LINES" VALUES(9125,15,59,13);
INSERT INTO "LINES" VALUES(9126,15,58,12);
INSERT INTO "LINES" VALUES(9127,15,57,11);
INSERT INTO "LINES" VALUES(9128,15,56,10);
INSERT INTO "LINES" VALUES(9129,15,55,9);
INSERT INTO "LINES" VALUES(9130,15,54,8);
INSERT INTO "LINES" VALUES(9131,15,53,7);
INSERT INTO "LINES" VALUES(9132,15,52,6);
INSERT INTO "LINES" VALUES(9133,15,51,5);
INSERT INTO "LINES" VALUES(9134,15,50,4);
INSERT INTO "LINES" VALUES(9135,15,49,3);
INSERT INTO "LINES" VALUES(9136,15,48,2);
INSERT INTO "LINES" VALUES(9137,15,47,1);
INSERT INTO "LINES" VALUES(9138,15,46,1);
INSERT INTO "LINES" VALUES(9139,15,1,1);
INSERT INTO "LINES" VALUES(9140,15,2,1);
INSERT INTO "LINES" VALUES(9141,15,3,1);
INSERT INTO "LINES" VALUES(9142,15,4,1);
INSERT INTO "LINES" VALUES(9143,15,5,1);
INSERT INTO "LINES" VALUES(9144,15,6,1);
INSERT INTO "LINES" VALUES(9145,15,7,1);
INSERT INTO "LINES" VALUES(9146,15,8,1);
INSERT INTO "LINES" VALUES(9147,15,9,1);
INSERT INTO "LINES" VALUES(9148,15,10,1);
INSERT INTO "LINES" VALUES(9149,15,11,1);
INSERT INTO "LINES" VALUES(9150,15,12,1);
INSERT INTO "LINES" VALUES(9151,15,13,1);
INSERT INTO "LINES" VALUES(9152,15,14,1);
INSERT INTO "LINES" VALUES(9153,15,15,1);
INSERT INTO "LINES" VALUES(9154,15,16,1);
INSERT INTO "LINES" VALUES(9155,15,17,1);
INSERT INTO "LINES" VALUES(9156,15,18,1);
INSERT INTO "LINES" VALUES(9157,15,19,1);
INSERT INTO "LINES" VALUES(9158,15,20,1);
INSERT INTO "LINES" VALUES(9159,15,21,1);
INSERT INTO "LINES" VALUES(9160,15,22,1);
INSERT INTO "LINES" VALUES(9161,15,23,1);
INSERT INTO "LINES" VALUES(9162,15,24,1);
INSERT INTO "LINES" VALUES(9163,15,25,1);
INSERT INTO "LINES" VALUES(9164,15,26,1);
INSERT INTO "LINES" VALUES(9165,15,27,1);
INSERT INTO "LINES" VALUES(9166,15,28,1);
INSERT INTO "LINES" VALUES(9167,15,29,1);
INSERT INTO "LINES" VALUES(9168,15,30,1);
INSERT INTO "LINES" VALUES(9169,15,31,1);
INSERT INTO "LINES" VALUES(9170,15,32,1);
INSERT INTO "LINES" VALUES(9171,15,33,1);
INSERT INTO "LINES" VALUES(9172,15,34,1);
INSERT INTO "LINES" VALUES(9173,15,35,1);
INSERT INTO "LINES" VALUES(9174,15,36,1);
INSERT INTO "LINES" VALUES(9175,15,37,1);
INSERT INTO "LINES" VALUES(9176,15,38,1);
INSERT INTO "LINES" VALUES(9177,15,39,1);
INSERT INTO "LINES" VALUES(9178,15,40,1);
INSERT INTO "LINES" VALUES(9179,15,41,1);
INSERT INTO "LINES" VALUES(9180,15,42,1);
INSERT INTO "LINES" VALUES(9181,15,43,1);
INSERT INTO "LINES" VALUES(9182,15,44,1);
INSERT INTO "LINES" VALUES(9183,15,45,1);
INSERT INTO "LINES" VALUES(9265,4,18,17);
INSERT INTO "LINES" VALUES(9266,4,17,16);
INSERT INTO "LINES" VALUES(9267,4,16,15);
INSERT INTO "LINES" VALUES(9268,4,15,14);
INSERT INTO "LINES" VALUES(9269,4,14,13);
INSERT INTO "LINES" VALUES(9270,4,13,12);
INSERT INTO "LINES" VALUES(9271,4,12,11);
INSERT INTO "LINES" VALUES(9272,4,11,10);
INSERT INTO "LINES" VALUES(9273,4,10,9);
INSERT INTO "LINES" VALUES(9274,4,9,8);
INSERT INTO "LINES" VALUES(9275,4,8,7);
INSERT INTO "LINES" VALUES(9276,4,7,6);
INSERT INTO "LINES" VALUES(9277,4,6,5);
INSERT INTO "LINES" VALUES(9278,4,5,4);
INSERT INTO "LINES" VALUES(9279,4,4,3);
INSERT INTO "LINES" VALUES(9280,4,3,2);
INSERT INTO "LINES" VALUES(9281,4,2,1);
INSERT INTO "LINES" VALUES(9282,5,26,25);
INSERT INTO "LINES" VALUES(9283,5,25,24);
INSERT INTO "LINES" VALUES(9284,5,24,23);
INSERT INTO "LINES" VALUES(9285,5,23,22);
INSERT INTO "LINES" VALUES(9286,5,22,21);
INSERT INTO "LINES" VALUES(9287,5,21,20);
INSERT INTO "LINES" VALUES(9288,5,20,19);
INSERT INTO "LINES" VALUES(9289,5,19,18);
INSERT INTO "LINES" VALUES(9290,5,18,17);
INSERT INTO "LINES" VALUES(9291,5,17,16);
INSERT INTO "LINES" VALUES(9292,5,16,15);
INSERT INTO "LINES" VALUES(9293,5,15,14);
INSERT INTO "LINES" VALUES(9294,5,14,13);
INSERT INTO "LINES" VALUES(9295,5,13,12);
INSERT INTO "LINES" VALUES(9296,5,12,11);
INSERT INTO "LINES" VALUES(9297,5,11,10);
INSERT INTO "LINES" VALUES(9298,5,10,9);
INSERT INTO "LINES" VALUES(9299,5,9,8);
INSERT INTO "LINES" VALUES(9300,5,8,7);
INSERT INTO "LINES" VALUES(9301,5,7,6);
INSERT INTO "LINES" VALUES(9302,5,6,5);
INSERT INTO "LINES" VALUES(9303,5,5,4);
INSERT INTO "LINES" VALUES(9308,16,69,23);
INSERT INTO "LINES" VALUES(9309,16,68,22);
INSERT INTO "LINES" VALUES(9310,16,67,21);
INSERT INTO "LINES" VALUES(9311,16,66,20);
INSERT INTO "LINES" VALUES(9312,16,65,19);
INSERT INTO "LINES" VALUES(9313,16,64,18);
INSERT INTO "LINES" VALUES(9314,16,63,17);
INSERT INTO "LINES" VALUES(9315,16,62,16);
INSERT INTO "LINES" VALUES(9316,16,61,15);
INSERT INTO "LINES" VALUES(9317,16,60,14);
INSERT INTO "LINES" VALUES(9318,16,59,13);
INSERT INTO "LINES" VALUES(9319,16,58,12);
INSERT INTO "LINES" VALUES(9320,16,57,11);
INSERT INTO "LINES" VALUES(9321,16,56,10);
INSERT INTO "LINES" VALUES(9322,16,55,9);
INSERT INTO "LINES" VALUES(9323,16,54,8);
INSERT INTO "LINES" VALUES(9324,16,53,7);
INSERT INTO "LINES" VALUES(9325,16,52,6);
INSERT INTO "LINES" VALUES(9326,16,51,5);
INSERT INTO "LINES" VALUES(9327,16,50,4);
INSERT INTO "LINES" VALUES(9328,16,49,4);
INSERT INTO "LINES" VALUES(9329,16,48,3);
INSERT INTO "LINES" VALUES(9330,16,47,2);
INSERT INTO "LINES" VALUES(9331,16,46,1);
INSERT INTO "LINES" VALUES(9332,16,1,1);
INSERT INTO "LINES" VALUES(9333,16,2,1);
INSERT INTO "LINES" VALUES(9334,16,3,1);
INSERT INTO "LINES" VALUES(9335,16,4,1);
INSERT INTO "LINES" VALUES(9336,16,5,1);
INSERT INTO "LINES" VALUES(9337,16,6,1);
INSERT INTO "LINES" VALUES(9338,16,7,1);
INSERT INTO "LINES" VALUES(9339,16,8,1);
INSERT INTO "LINES" VALUES(9340,16,9,1);
INSERT INTO "LINES" VALUES(9341,16,10,1);
INSERT INTO "LINES" VALUES(9342,16,11,1);
INSERT INTO "LINES" VALUES(9343,16,12,1);
INSERT INTO "LINES" VALUES(9344,16,13,1);
INSERT INTO "LINES" VALUES(9345,16,14,1);
INSERT INTO "LINES" VALUES(9346,16,15,1);
INSERT INTO "LINES" VALUES(9347,16,16,1);
INSERT INTO "LINES" VALUES(9348,16,17,1);
INSERT INTO "LINES" VALUES(9349,16,18,1);
INSERT INTO "LINES" VALUES(9350,16,19,1);
INSERT INTO "LINES" VALUES(9351,16,20,1);
INSERT INTO "LINES" VALUES(9352,16,21,1);
INSERT INTO "LINES" VALUES(9353,16,22,1);
INSERT INTO "LINES" VALUES(9354,16,23,1);
INSERT INTO "LINES" VALUES(9355,16,24,1);
INSERT INTO "LINES" VALUES(9356,16,25,1);
INSERT INTO "LINES" VALUES(9357,16,26,1);
INSERT INTO "LINES" VALUES(9358,16,27,1);
INSERT INTO "LINES" VALUES(9359,16,28,1);
INSERT INTO "LINES" VALUES(9360,16,29,1);
INSERT INTO "LINES" VALUES(9361,16,30,1);
INSERT INTO "LINES" VALUES(9362,16,31,1);
INSERT INTO "LINES" VALUES(9363,16,32,1);
INSERT INTO "LINES" VALUES(9364,16,33,1);
INSERT INTO "LINES" VALUES(9365,16,34,1);
INSERT INTO "LINES" VALUES(9366,16,35,1);
INSERT INTO "LINES" VALUES(9367,16,36,1);
INSERT INTO "LINES" VALUES(9368,16,37,1);
INSERT INTO "LINES" VALUES(9369,16,38,1);
INSERT INTO "LINES" VALUES(9370,16,39,1);
INSERT INTO "LINES" VALUES(9371,16,40,1);
INSERT INTO "LINES" VALUES(9372,16,41,1);
INSERT INTO "LINES" VALUES(9373,16,42,1);
INSERT INTO "LINES" VALUES(9374,16,43,1);
INSERT INTO "LINES" VALUES(9375,16,44,1);
INSERT INTO "LINES" VALUES(9376,16,45,1);
INSERT INTO "LINES" VALUES(9411,1,87,33);
INSERT INTO "LINES" VALUES(9412,1,86,32);
INSERT INTO "LINES" VALUES(9413,1,85,31);
INSERT INTO "LINES" VALUES(9414,1,84,30);
INSERT INTO "LINES" VALUES(9415,1,83,29);
INSERT INTO "LINES" VALUES(9416,1,82,28);
INSERT INTO "LINES" VALUES(9417,1,81,27);
INSERT INTO "LINES" VALUES(9418,1,80,26);
INSERT INTO "LINES" VALUES(9419,1,79,25);
INSERT INTO "LINES" VALUES(9420,1,78,26);
INSERT INTO "LINES" VALUES(9421,1,77,26);
INSERT INTO "LINES" VALUES(9422,1,76,26);
INSERT INTO "LINES" VALUES(9423,1,75,24);
INSERT INTO "LINES" VALUES(9424,1,74,23);
INSERT INTO "LINES" VALUES(9425,1,73,22);
INSERT INTO "LINES" VALUES(9426,1,72,23);
INSERT INTO "LINES" VALUES(9427,1,71,23);
INSERT INTO "LINES" VALUES(9428,1,70,23);
INSERT INTO "LINES" VALUES(9429,1,69,23);
INSERT INTO "LINES" VALUES(9430,1,68,23);
INSERT INTO "LINES" VALUES(9431,1,67,21);
INSERT INTO "LINES" VALUES(9432,1,66,20);
INSERT INTO "LINES" VALUES(9433,1,65,19);
INSERT INTO "LINES" VALUES(9434,1,64,18);
INSERT INTO "LINES" VALUES(9435,1,63,17);
INSERT INTO "LINES" VALUES(9436,1,62,16);
INSERT INTO "LINES" VALUES(9437,1,61,15);
INSERT INTO "LINES" VALUES(9438,1,60,14);
INSERT INTO "LINES" VALUES(9439,1,59,13);
INSERT INTO "LINES" VALUES(9440,1,58,12);
INSERT INTO "LINES" VALUES(9441,1,57,11);
INSERT INTO "LINES" VALUES(9442,1,56,10);
INSERT INTO "LINES" VALUES(9443,1,55,9);
INSERT INTO "LINES" VALUES(9444,1,54,8);
INSERT INTO "LINES" VALUES(9445,1,53,7);
INSERT INTO "LINES" VALUES(9446,1,52,6);
INSERT INTO "LINES" VALUES(9447,1,51,5);
INSERT INTO "LINES" VALUES(9448,1,50,4);
INSERT INTO "LINES" VALUES(9449,1,49,3);
INSERT INTO "LINES" VALUES(9450,1,48,2);
INSERT INTO "LINES" VALUES(9451,1,47,1);
INSERT INTO "LINES" VALUES(9452,1,46,1);
INSERT INTO "LINES" VALUES(9453,1,1,1);
INSERT INTO "LINES" VALUES(9454,1,2,1);
INSERT INTO "LINES" VALUES(9455,1,3,1);
INSERT INTO "LINES" VALUES(9456,1,4,1);
INSERT INTO "LINES" VALUES(9457,1,5,1);
INSERT INTO "LINES" VALUES(9458,1,6,1);
INSERT INTO "LINES" VALUES(9459,1,7,1);
INSERT INTO "LINES" VALUES(9460,1,8,1);
INSERT INTO "LINES" VALUES(9461,1,9,1);
INSERT INTO "LINES" VALUES(9462,1,10,1);
INSERT INTO "LINES" VALUES(9463,1,11,1);
INSERT INTO "LINES" VALUES(9464,1,12,1);
INSERT INTO "LINES" VALUES(9465,1,13,1);
INSERT INTO "LINES" VALUES(9466,1,14,1);
INSERT INTO "LINES" VALUES(9467,1,15,1);
INSERT INTO "LINES" VALUES(9468,1,16,1);
INSERT INTO "LINES" VALUES(9469,1,17,1);
INSERT INTO "LINES" VALUES(9470,1,18,1);
INSERT INTO "LINES" VALUES(9471,1,19,1);
INSERT INTO "LINES" VALUES(9472,1,20,1);
INSERT INTO "LINES" VALUES(9473,1,21,1);
INSERT INTO "LINES" VALUES(9474,1,22,1);
INSERT INTO "LINES" VALUES(9475,1,23,1);
INSERT INTO "LINES" VALUES(9476,1,24,1);
INSERT INTO "LINES" VALUES(9477,1,25,1);
INSERT INTO "LINES" VALUES(9478,1,26,1);
INSERT INTO "LINES" VALUES(9479,1,27,1);
INSERT INTO "LINES" VALUES(9480,1,28,1);
INSERT INTO "LINES" VALUES(9481,1,29,1);
INSERT INTO "LINES" VALUES(9482,1,30,1);
INSERT INTO "LINES" VALUES(9483,1,31,1);
INSERT INTO "LINES" VALUES(9484,1,32,1);
INSERT INTO "LINES" VALUES(9485,1,33,1);
INSERT INTO "LINES" VALUES(9486,1,34,1);
INSERT INTO "LINES" VALUES(9487,1,35,1);
INSERT INTO "LINES" VALUES(9488,1,36,1);
INSERT INTO "LINES" VALUES(9489,1,37,1);
INSERT INTO "LINES" VALUES(9490,1,38,1);
INSERT INTO "LINES" VALUES(9491,1,39,1);
INSERT INTO "LINES" VALUES(9492,1,40,1);
INSERT INTO "LINES" VALUES(9493,1,41,1);
INSERT INTO "LINES" VALUES(9494,1,42,1);
INSERT INTO "LINES" VALUES(9495,1,43,1);
INSERT INTO "LINES" VALUES(9496,1,44,1);
INSERT INTO "LINES" VALUES(9497,1,45,1);
INSERT INTO "LINES" VALUES(9498,3,81,35);
INSERT INTO "LINES" VALUES(9499,3,80,34);
INSERT INTO "LINES" VALUES(9500,3,79,33);
INSERT INTO "LINES" VALUES(9501,3,78,32);
INSERT INTO "LINES" VALUES(9502,3,77,31);
INSERT INTO "LINES" VALUES(9503,3,76,30);
INSERT INTO "LINES" VALUES(9504,3,75,29);
INSERT INTO "LINES" VALUES(9505,3,74,28);
INSERT INTO "LINES" VALUES(9506,3,73,27);
INSERT INTO "LINES" VALUES(9507,3,72,26);
INSERT INTO "LINES" VALUES(9508,3,71,25);
INSERT INTO "LINES" VALUES(9509,3,70,24);
INSERT INTO "LINES" VALUES(9510,3,69,23);
INSERT INTO "LINES" VALUES(9511,3,68,22);
INSERT INTO "LINES" VALUES(9512,3,67,21);
INSERT INTO "LINES" VALUES(9513,3,66,20);
INSERT INTO "LINES" VALUES(9514,3,65,19);
INSERT INTO "LINES" VALUES(9515,3,64,18);
INSERT INTO "LINES" VALUES(9516,3,63,17);
INSERT INTO "LINES" VALUES(9517,3,62,16);
INSERT INTO "LINES" VALUES(9518,3,61,15);
INSERT INTO "LINES" VALUES(9519,3,60,14);
INSERT INTO "LINES" VALUES(9520,3,59,13);
INSERT INTO "LINES" VALUES(9521,3,58,12);
INSERT INTO "LINES" VALUES(9522,3,57,11);
INSERT INTO "LINES" VALUES(9523,3,56,10);
INSERT INTO "LINES" VALUES(9524,3,55,9);
INSERT INTO "LINES" VALUES(9525,3,54,8);
INSERT INTO "LINES" VALUES(9526,3,53,7);
INSERT INTO "LINES" VALUES(9527,3,52,6);
INSERT INTO "LINES" VALUES(9528,3,51,5);
INSERT INTO "LINES" VALUES(9529,3,50,4);
INSERT INTO "LINES" VALUES(9530,3,49,4);
INSERT INTO "LINES" VALUES(9531,3,48,3);
INSERT INTO "LINES" VALUES(9532,3,47,2);
INSERT INTO "LINES" VALUES(9533,3,46,1);
INSERT INTO "LINES" VALUES(9534,3,1,1);
INSERT INTO "LINES" VALUES(9535,3,2,1);
INSERT INTO "LINES" VALUES(9536,3,3,1);
INSERT INTO "LINES" VALUES(9537,3,4,1);
INSERT INTO "LINES" VALUES(9538,3,5,1);
INSERT INTO "LINES" VALUES(9539,3,6,1);
INSERT INTO "LINES" VALUES(9540,3,7,1);
INSERT INTO "LINES" VALUES(9541,3,8,1);
INSERT INTO "LINES" VALUES(9542,3,9,1);
INSERT INTO "LINES" VALUES(9543,3,10,1);
INSERT INTO "LINES" VALUES(9544,3,11,1);
INSERT INTO "LINES" VALUES(9545,3,12,1);
INSERT INTO "LINES" VALUES(9546,3,13,1);
INSERT INTO "LINES" VALUES(9547,3,14,1);
INSERT INTO "LINES" VALUES(9548,3,15,1);
INSERT INTO "LINES" VALUES(9549,3,16,1);
INSERT INTO "LINES" VALUES(9550,3,17,1);
INSERT INTO "LINES" VALUES(9551,3,18,1);
INSERT INTO "LINES" VALUES(9552,3,19,1);
INSERT INTO "LINES" VALUES(9553,3,20,1);
INSERT INTO "LINES" VALUES(9554,3,21,1);
INSERT INTO "LINES" VALUES(9555,3,22,1);
INSERT INTO "LINES" VALUES(9556,3,23,1);
INSERT INTO "LINES" VALUES(9557,3,24,1);
INSERT INTO "LINES" VALUES(9558,3,25,1);
INSERT INTO "LINES" VALUES(9559,3,26,1);
INSERT INTO "LINES" VALUES(9560,3,27,1);
INSERT INTO "LINES" VALUES(9561,3,28,1);
INSERT INTO "LINES" VALUES(9562,3,29,1);
INSERT INTO "LINES" VALUES(9563,3,30,1);
INSERT INTO "LINES" VALUES(9564,3,31,1);
INSERT INTO "LINES" VALUES(9565,3,32,1);
INSERT INTO "LINES" VALUES(9566,3,33,1);
INSERT INTO "LINES" VALUES(9567,3,34,1);
INSERT INTO "LINES" VALUES(9568,3,35,1);
INSERT INTO "LINES" VALUES(9569,3,36,1);
INSERT INTO "LINES" VALUES(9570,3,37,1);
INSERT INTO "LINES" VALUES(9571,3,38,1);
INSERT INTO "LINES" VALUES(9572,3,39,1);
INSERT INTO "LINES" VALUES(9573,3,40,1);
INSERT INTO "LINES" VALUES(9574,3,41,1);
INSERT INTO "LINES" VALUES(9575,3,42,1);
INSERT INTO "LINES" VALUES(9576,3,43,1);
INSERT INTO "LINES" VALUES(9577,3,44,1);
INSERT INTO "LINES" VALUES(9578,3,45,1);
INSERT INTO "LINES" VALUES(9584,2,66,20);
INSERT INTO "LINES" VALUES(9585,2,65,19);
INSERT INTO "LINES" VALUES(9586,2,64,18);
INSERT INTO "LINES" VALUES(9587,2,63,17);
INSERT INTO "LINES" VALUES(9588,2,62,16);
INSERT INTO "LINES" VALUES(9589,2,61,15);
INSERT INTO "LINES" VALUES(9590,2,60,14);
INSERT INTO "LINES" VALUES(9591,2,59,13);
INSERT INTO "LINES" VALUES(9592,2,58,12);
INSERT INTO "LINES" VALUES(9593,2,57,11);
INSERT INTO "LINES" VALUES(9594,2,56,10);
INSERT INTO "LINES" VALUES(9595,2,55,9);
INSERT INTO "LINES" VALUES(9596,2,54,8);
INSERT INTO "LINES" VALUES(9597,2,53,7);
INSERT INTO "LINES" VALUES(9598,2,52,6);
INSERT INTO "LINES" VALUES(9599,2,51,5);
INSERT INTO "LINES" VALUES(9600,2,50,5);
INSERT INTO "LINES" VALUES(9601,2,49,4);
INSERT INTO "LINES" VALUES(9602,2,48,3);
INSERT INTO "LINES" VALUES(9603,2,47,2);
INSERT INTO "LINES" VALUES(9604,2,46,1);
INSERT INTO "LINES" VALUES(9605,2,1,1);
INSERT INTO "LINES" VALUES(9606,2,2,1);
INSERT INTO "LINES" VALUES(9607,2,3,1);
INSERT INTO "LINES" VALUES(9608,2,4,1);
INSERT INTO "LINES" VALUES(9609,2,5,1);
INSERT INTO "LINES" VALUES(9610,2,6,1);
INSERT INTO "LINES" VALUES(9611,2,7,1);
INSERT INTO "LINES" VALUES(9612,2,8,1);
INSERT INTO "LINES" VALUES(9613,2,9,1);
INSERT INTO "LINES" VALUES(9614,2,10,1);
INSERT INTO "LINES" VALUES(9615,2,11,1);
INSERT INTO "LINES" VALUES(9616,2,12,1);
INSERT INTO "LINES" VALUES(9617,2,13,1);
INSERT INTO "LINES" VALUES(9618,2,14,1);
INSERT INTO "LINES" VALUES(9619,2,15,1);
INSERT INTO "LINES" VALUES(9620,2,16,1);
INSERT INTO "LINES" VALUES(9621,2,17,1);
INSERT INTO "LINES" VALUES(9622,2,18,1);
INSERT INTO "LINES" VALUES(9623,2,19,1);
INSERT INTO "LINES" VALUES(9624,2,20,1);
INSERT INTO "LINES" VALUES(9625,2,21,1);
INSERT INTO "LINES" VALUES(9626,2,22,1);
INSERT INTO "LINES" VALUES(9627,2,23,1);
INSERT INTO "LINES" VALUES(9628,2,24,1);
INSERT INTO "LINES" VALUES(9629,2,25,1);
INSERT INTO "LINES" VALUES(9630,2,26,1);
INSERT INTO "LINES" VALUES(9631,2,27,1);
INSERT INTO "LINES" VALUES(9632,2,28,1);
INSERT INTO "LINES" VALUES(9633,2,29,1);
INSERT INTO "LINES" VALUES(9634,2,30,1);
INSERT INTO "LINES" VALUES(9635,2,31,1);
INSERT INTO "LINES" VALUES(9636,2,32,1);
INSERT INTO "LINES" VALUES(9637,2,33,1);
INSERT INTO "LINES" VALUES(9638,2,34,1);
INSERT INTO "LINES" VALUES(9639,2,35,1);
INSERT INTO "LINES" VALUES(9640,2,36,1);
INSERT INTO "LINES" VALUES(9641,2,37,1);
INSERT INTO "LINES" VALUES(9642,2,38,1);
INSERT INTO "LINES" VALUES(9643,2,39,1);
INSERT INTO "LINES" VALUES(9644,2,40,1);
INSERT INTO "LINES" VALUES(9645,2,41,1);
INSERT INTO "LINES" VALUES(9646,2,42,1);
INSERT INTO "LINES" VALUES(9647,2,43,1);
INSERT INTO "LINES" VALUES(9648,2,44,1);
INSERT INTO "LINES" VALUES(9649,2,45,1);
CREATE TABLE `LINES_REPLACEMENTS` (`line_id`  INTEGER NOT NULL,`replacement_id`  INTEGER NOT NULL,PRIMARY KEY(line_id, replacement_id), FOREIGN KEY(`line_id`) REFERENCES LINES(id), FOREIGN KEY(`replacement_id`) REFERENCES REPLACEMENTS(id) );
CREATE TABLE `RELATIONS` (`file_id`  INTEGER NOT NULL,`dep_id`   INTEGER NOT NULL,`dependency_timestamp` DATETIME NOT NULL,PRIMARY KEY(file_id, dep_id), FOREIGN KEY(`file_id`) REFERENCES FILES(id), FOREIGN KEY(`dep_id`) REFERENCES FILES(id) );
INSERT INTO "RELATIONS" VALUES(7,8,1427813252);
INSERT INTO "RELATIONS" VALUES(7,9,1427985886);
INSERT INTO "RELATIONS" VALUES(7,12,1427220376);
INSERT INTO "RELATIONS" VALUES(7,13,1427397043);
INSERT INTO "RELATIONS" VALUES(10,9,1427985886);
INSERT INTO "RELATIONS" VALUES(10,11,1427218446);
INSERT INTO "RELATIONS" VALUES(10,12,1427220376);
INSERT INTO "RELATIONS" VALUES(10,14,1427214610);
INSERT INTO "RELATIONS" VALUES(17,9,1427982149);
INSERT INTO "RELATIONS" VALUES(17,18,1427813274);
INSERT INTO "RELATIONS" VALUES(17,12,1427220376);
INSERT INTO "RELATIONS" VALUES(17,19,1427212284);
CREATE TABLE `REPLACEMENTS` (`id`  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`file_id`   INTEGER NOT NULL,`start_line` INTEGER NOT NULL,`lines_replaced` INTEGER NOT NULL,`lines_in_replacement` INTEGER NOT NULL,`comes_from_start_line` INTEGER NOT NULL,`comes_from_end_line` INTEGER NOT NULL,`comes_from_file_id` INTEGER NOT NULL,`transformation_id` INTEGER NOT NULL,`unhandled` INTEGER DEFAULT(1),`replacement_text` TEXT NOT NULL,FOREIGN KEY(`file_id`) REFERENCES FILES(id), FOREIGN KEY(`comes_from_file_id`) REFERENCES FILES(id), FOREIGN KEY(`transformation_id`) REFERENCES TRANSFORMATIONS(id) );
INSERT INTO "REPLACEMENTS" VALUES(1,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(2,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(3,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(4,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(5,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(6,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(7,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(8,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(9,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(10,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(11,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(12,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(13,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(14,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(15,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(16,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(17,15,26,0,5,26,26,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(18,15,29,0,3,29,29,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(19,15,30,0,0,30,30,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(20,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(21,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(22,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(23,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(24,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(25,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(26,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(27,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(28,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(29,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(30,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(31,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(32,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(33,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(34,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(35,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(36,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(37,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(38,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(39,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(40,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(41,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(42,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(43,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(44,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(45,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(46,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(47,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(48,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(49,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(50,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(51,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(52,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(53,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(54,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(55,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(56,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(57,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(58,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(59,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(60,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(61,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(62,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(63,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(64,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(65,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(66,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(67,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(68,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(69,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(70,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(71,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(72,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(73,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(74,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(75,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(76,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(77,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(78,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(79,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(80,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(81,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(82,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(83,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(84,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(85,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(86,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(87,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(88,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(89,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(90,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(91,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(92,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(93,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(94,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(95,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(96,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(97,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(98,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(99,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(100,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(101,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(102,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(103,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(104,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(105,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(106,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(107,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(108,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(109,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(110,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(111,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(112,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(113,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(114,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(115,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(116,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(117,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(118,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(119,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(120,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(121,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(122,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(123,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(124,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(125,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(126,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(127,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(128,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(129,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(130,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(131,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(132,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(133,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(134,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(135,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(136,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(137,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(138,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(139,3,17,0,0,17,17,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(140,3,20,0,0,20,20,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(141,3,21,0,0,21,21,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(142,3,22,0,0,22,22,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(143,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(144,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(145,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(146,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(147,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(148,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(149,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(150,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(151,3,17,0,0,17,17,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(152,3,20,0,0,20,20,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(153,3,21,0,0,21,21,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(154,3,22,0,0,22,22,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(155,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(156,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(157,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(158,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(159,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(160,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(161,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(162,3,17,0,0,17,17,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(163,3,20,0,0,20,20,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(164,3,21,0,0,21,21,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(165,3,22,0,0,22,22,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(166,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(167,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(168,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(169,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(170,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(171,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(172,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(173,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(174,3,17,0,0,17,17,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(175,3,20,0,0,20,20,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(176,3,21,0,0,21,21,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(177,3,22,0,0,22,22,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(178,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(179,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(180,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(181,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(182,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(183,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(184,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(185,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(186,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(187,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(188,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(189,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(190,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(191,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(192,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(193,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(194,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(195,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(196,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(197,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(198,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(199,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(200,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(201,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(202,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(203,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(204,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(205,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(206,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(207,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(208,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(209,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(210,3,17,0,0,17,17,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(211,3,20,0,0,20,20,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(212,3,21,0,0,21,21,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(213,3,22,0,0,22,22,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(214,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(215,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(216,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(217,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(218,3,17,0,0,17,17,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(219,3,20,0,0,20,20,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(220,3,21,0,0,21,21,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(221,3,22,0,0,22,22,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(222,20,1,0,45,1,1,20,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(223,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(224,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(225,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(226,3,17,0,0,17,17,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(227,3,20,0,0,20,20,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(228,3,21,0,0,21,21,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(229,3,22,0,0,22,22,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(230,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(231,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(232,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(233,20,1,0,45,1,1,20,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(234,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(235,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(236,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(237,3,17,0,0,17,17,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(238,3,20,0,0,20,20,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(239,3,21,0,0,21,21,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(240,3,22,0,0,22,22,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(241,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(242,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(243,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(244,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(245,3,17,0,0,17,17,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(246,3,20,0,0,20,20,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(247,3,21,0,0,21,21,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(248,3,22,0,0,22,22,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(249,22,1,0,45,1,1,22,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(250,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(251,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(252,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(253,3,17,0,0,17,17,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(254,3,20,0,0,20,20,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(255,3,21,0,0,21,21,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(256,3,22,0,0,22,22,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(257,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(258,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(259,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(260,22,1,0,45,1,1,22,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(261,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(262,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(263,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(264,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(265,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(266,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(267,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(268,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(269,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(270,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(271,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(272,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(273,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(274,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(275,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(276,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(277,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(278,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
CREATE TABLE `TRANSFORMATIONS` (`id`  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`name` TEXT NOT NULL);
INSERT INTO "TRANSFORMATIONS" VALUES(1,'MultipleTransforms');
INSERT INTO "TRANSFORMATIONS" VALUES(9,'ReplaceRvalueRef');
DELETE FROM "sqlite_sequence";
INSERT INTO "sqlite_sequence" VALUES('FILES',23);
INSERT INTO "sqlite_sequence" VALUES('LINES',9649);
INSERT INTO "sqlite_sequence" VALUES('TRANSFORMATIONS',278);
INSERT INTO "sqlite_sequence" VALUES('REPLACEMENTS',278);
CREATE UNIQUE INDEX FILES_INDEX ON FILES (path);
CREATE UNIQUE INDEX FILES_INDEX_ID ON FILES (id);
CREATE UNIQUE INDEX COMP_UNIT_INDEX ON COMPILATION_UNIT (id);
CREATE INDEX RELATIONS_INDEX ON RELATIONS (file_id, dep_id);
CREATE UNIQUE INDEX TRANSFORMATIONS_INDEX_NAME ON TRANSFORMATIONS (name);
CREATE UNIQUE INDEX TRANSFORMATIONS_INDEX_ID ON TRANSFORMATIONS (id);
CREATE UNIQUE INDEX REPLACEMENT_INDEX_4 ON REPLACEMENTS (id, file_id, start_line, lines_replaced, replacement_text);
CREATE UNIQUE INDEX REPLACEMENT_INDEX_1 ON REPLACEMENTS (id);
CREATE INDEX REPLACEMENT_INDEX_3 ON REPLACEMENTS (transformation_id);
CREATE INDEX REPLACEMENT_INDEX_2 ON REPLACEMENTS (file_id);
CREATE UNIQUE INDEX LINES_INDEX_FILE_ID_LINE ON LINES (file_id, line);
CREATE UNIQUE INDEX LINES_INDEX_ID ON LINES (id);
CREATE UNIQUE INDEX LINES_REPLACEMENTS_INDEX_LINE_ID_REPLACEMENT_ID ON LINES_REPLACEMENTS (line_id, replacement_id);
CREATE INDEX LINES_REPLACEMENTS_INDEX_REPLACEMENT_ID ON LINES_REPLACEMENTS (replacement_id);
CREATE INDEX LINES_REPLACEMENTS_INDEX_ID ON LINES_REPLACEMENTS (line_id);
COMMIT;