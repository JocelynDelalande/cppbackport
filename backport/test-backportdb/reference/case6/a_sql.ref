BEGIN TRANSACTION;
CREATE TABLE `COMPILATION_UNIT` ( `id`   INTEGER NOT NULL PRIMARY KEY,`timestamp`    DATETIME NOT NULL, `cmd_args` TEXT NOT NULL, FOREIGN KEY(`id`) REFERENCES FILES(id) );
INSERT INTO "COMPILATION_UNIT" VALUES(7,1427387312,' cl.exe -c work/A.cpp -o2');
INSERT INTO "COMPILATION_UNIT" VALUES(10,1427215320,' cl.exe -c work/B.cpp -o2');
INSERT INTO "COMPILATION_UNIT" VALUES(17,1427461578,' cl.exe -c work/C.cpp -o2');
CREATE TABLE `FILES` ( `id`   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`number_of_lines` INTEGER,`path` TEXT NOT NULL);
INSERT INTO "FILES" VALUES(1,42,'work/temp/A.cpp');
INSERT INTO "FILES" VALUES(2,18,'work/temp/A.h');
INSERT INTO "FILES" VALUES(3,35,'work/temp/All.h');
INSERT INTO "FILES" VALUES(4,NULL,'work/temp/B.cpp');
INSERT INTO "FILES" VALUES(5,NULL,'work/temp/B.h');
INSERT INTO "FILES" VALUES(6,10,'work/temp/IncAll.h');
INSERT INTO "FILES" VALUES(7,NULL,'work/A.cpp');
INSERT INTO "FILES" VALUES(8,NULL,'work/A.h');
INSERT INTO "FILES" VALUES(9,NULL,'work/All.h');
INSERT INTO "FILES" VALUES(10,NULL,'work/B.cpp');
INSERT INTO "FILES" VALUES(11,NULL,'work/B.h');
INSERT INTO "FILES" VALUES(12,NULL,'work/IncAll.h');
INSERT INTO "FILES" VALUES(13,NULL,'work/OnlyA.h');
INSERT INTO "FILES" VALUES(14,NULL,'work/OnlyB.h');
INSERT INTO "FILES" VALUES(15,42,'work/temp/C.cpp');
INSERT INTO "FILES" VALUES(16,21,'work/temp/C.h');
INSERT INTO "FILES" VALUES(17,NULL,'work/C.cpp');
INSERT INTO "FILES" VALUES(18,NULL,'work/C.h');
INSERT INTO "FILES" VALUES(19,NULL,'work/OnlyC.h');
CREATE TABLE `LINES` (`id`   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`file_id`  INTEGER NOT NULL,`line`  INTEGER NOT NULL,`original_line`  INTEGER NOT NULL,FOREIGN KEY(`file_id`) REFERENCES FILES(id) );
INSERT INTO "LINES" VALUES(2723,15,87,33);
INSERT INTO "LINES" VALUES(2724,15,86,32);
INSERT INTO "LINES" VALUES(2725,15,85,31);
INSERT INTO "LINES" VALUES(2726,15,84,30);
INSERT INTO "LINES" VALUES(2727,15,83,31);
INSERT INTO "LINES" VALUES(2728,15,82,31);
INSERT INTO "LINES" VALUES(2729,15,81,31);
INSERT INTO "LINES" VALUES(2730,15,80,29);
INSERT INTO "LINES" VALUES(2731,15,79,28);
INSERT INTO "LINES" VALUES(2732,15,78,27);
INSERT INTO "LINES" VALUES(2733,15,77,28);
INSERT INTO "LINES" VALUES(2734,15,76,28);
INSERT INTO "LINES" VALUES(2735,15,75,28);
INSERT INTO "LINES" VALUES(2736,15,74,28);
INSERT INTO "LINES" VALUES(2737,15,73,28);
INSERT INTO "LINES" VALUES(2738,15,72,26);
INSERT INTO "LINES" VALUES(2739,15,71,25);
INSERT INTO "LINES" VALUES(2740,15,70,24);
INSERT INTO "LINES" VALUES(2741,15,69,23);
INSERT INTO "LINES" VALUES(2742,15,68,22);
INSERT INTO "LINES" VALUES(2743,15,67,21);
INSERT INTO "LINES" VALUES(2744,15,66,20);
INSERT INTO "LINES" VALUES(2745,15,65,19);
INSERT INTO "LINES" VALUES(2746,15,64,18);
INSERT INTO "LINES" VALUES(2747,15,63,17);
INSERT INTO "LINES" VALUES(2748,15,62,16);
INSERT INTO "LINES" VALUES(2749,15,61,15);
INSERT INTO "LINES" VALUES(2750,15,60,14);
INSERT INTO "LINES" VALUES(2751,15,59,13);
INSERT INTO "LINES" VALUES(2752,15,58,12);
INSERT INTO "LINES" VALUES(2753,15,57,11);
INSERT INTO "LINES" VALUES(2754,15,56,10);
INSERT INTO "LINES" VALUES(2755,15,55,9);
INSERT INTO "LINES" VALUES(2756,15,54,8);
INSERT INTO "LINES" VALUES(2757,15,53,7);
INSERT INTO "LINES" VALUES(2758,15,52,6);
INSERT INTO "LINES" VALUES(2759,15,51,5);
INSERT INTO "LINES" VALUES(2760,15,50,4);
INSERT INTO "LINES" VALUES(2761,15,49,3);
INSERT INTO "LINES" VALUES(2762,15,48,2);
INSERT INTO "LINES" VALUES(2763,15,47,1);
INSERT INTO "LINES" VALUES(2764,15,46,1);
INSERT INTO "LINES" VALUES(2765,15,1,1);
INSERT INTO "LINES" VALUES(2766,15,2,1);
INSERT INTO "LINES" VALUES(2767,15,3,1);
INSERT INTO "LINES" VALUES(2768,15,4,1);
INSERT INTO "LINES" VALUES(2769,15,5,1);
INSERT INTO "LINES" VALUES(2770,15,6,1);
INSERT INTO "LINES" VALUES(2771,15,7,1);
INSERT INTO "LINES" VALUES(2772,15,8,1);
INSERT INTO "LINES" VALUES(2773,15,9,1);
INSERT INTO "LINES" VALUES(2774,15,10,1);
INSERT INTO "LINES" VALUES(2775,15,11,1);
INSERT INTO "LINES" VALUES(2776,15,12,1);
INSERT INTO "LINES" VALUES(2777,15,13,1);
INSERT INTO "LINES" VALUES(2778,15,14,1);
INSERT INTO "LINES" VALUES(2779,15,15,1);
INSERT INTO "LINES" VALUES(2780,15,16,1);
INSERT INTO "LINES" VALUES(2781,15,17,1);
INSERT INTO "LINES" VALUES(2782,15,18,1);
INSERT INTO "LINES" VALUES(2783,15,19,1);
INSERT INTO "LINES" VALUES(2784,15,20,1);
INSERT INTO "LINES" VALUES(2785,15,21,1);
INSERT INTO "LINES" VALUES(2786,15,22,1);
INSERT INTO "LINES" VALUES(2787,15,23,1);
INSERT INTO "LINES" VALUES(2788,15,24,1);
INSERT INTO "LINES" VALUES(2789,15,25,1);
INSERT INTO "LINES" VALUES(2790,15,26,1);
INSERT INTO "LINES" VALUES(2791,15,27,1);
INSERT INTO "LINES" VALUES(2792,15,28,1);
INSERT INTO "LINES" VALUES(2793,15,29,1);
INSERT INTO "LINES" VALUES(2794,15,30,1);
INSERT INTO "LINES" VALUES(2795,15,31,1);
INSERT INTO "LINES" VALUES(2796,15,32,1);
INSERT INTO "LINES" VALUES(2797,15,33,1);
INSERT INTO "LINES" VALUES(2798,15,34,1);
INSERT INTO "LINES" VALUES(2799,15,35,1);
INSERT INTO "LINES" VALUES(2800,15,36,1);
INSERT INTO "LINES" VALUES(2801,15,37,1);
INSERT INTO "LINES" VALUES(2802,15,38,1);
INSERT INTO "LINES" VALUES(2803,15,39,1);
INSERT INTO "LINES" VALUES(2804,15,40,1);
INSERT INTO "LINES" VALUES(2805,15,41,1);
INSERT INTO "LINES" VALUES(2806,15,42,1);
INSERT INTO "LINES" VALUES(2807,15,43,1);
INSERT INTO "LINES" VALUES(2808,15,44,1);
INSERT INTO "LINES" VALUES(2809,15,45,1);
INSERT INTO "LINES" VALUES(2987,16,66,1);
INSERT INTO "LINES" VALUES(2988,16,65,1);
INSERT INTO "LINES" VALUES(2989,16,64,1);
INSERT INTO "LINES" VALUES(2990,16,63,1);
INSERT INTO "LINES" VALUES(2991,16,62,1);
INSERT INTO "LINES" VALUES(2992,16,61,1);
INSERT INTO "LINES" VALUES(2993,16,60,1);
INSERT INTO "LINES" VALUES(2994,16,59,1);
INSERT INTO "LINES" VALUES(2995,16,58,1);
INSERT INTO "LINES" VALUES(2996,16,57,1);
INSERT INTO "LINES" VALUES(2997,16,56,1);
INSERT INTO "LINES" VALUES(2998,16,55,1);
INSERT INTO "LINES" VALUES(2999,16,54,1);
INSERT INTO "LINES" VALUES(3000,16,53,1);
INSERT INTO "LINES" VALUES(3001,16,52,1);
INSERT INTO "LINES" VALUES(3002,16,51,1);
INSERT INTO "LINES" VALUES(3003,16,50,1);
INSERT INTO "LINES" VALUES(3004,16,49,1);
INSERT INTO "LINES" VALUES(3005,16,48,1);
INSERT INTO "LINES" VALUES(3006,16,47,1);
INSERT INTO "LINES" VALUES(3007,16,46,1);
INSERT INTO "LINES" VALUES(3008,16,1,1);
INSERT INTO "LINES" VALUES(3009,16,2,1);
INSERT INTO "LINES" VALUES(3010,16,3,1);
INSERT INTO "LINES" VALUES(3011,16,4,1);
INSERT INTO "LINES" VALUES(3012,16,5,1);
INSERT INTO "LINES" VALUES(3013,16,6,1);
INSERT INTO "LINES" VALUES(3014,16,7,1);
INSERT INTO "LINES" VALUES(3015,16,8,1);
INSERT INTO "LINES" VALUES(3016,16,9,1);
INSERT INTO "LINES" VALUES(3017,16,10,1);
INSERT INTO "LINES" VALUES(3018,16,11,1);
INSERT INTO "LINES" VALUES(3019,16,12,1);
INSERT INTO "LINES" VALUES(3020,16,13,1);
INSERT INTO "LINES" VALUES(3021,16,14,1);
INSERT INTO "LINES" VALUES(3022,16,15,1);
INSERT INTO "LINES" VALUES(3023,16,16,1);
INSERT INTO "LINES" VALUES(3024,16,17,1);
INSERT INTO "LINES" VALUES(3025,16,18,1);
INSERT INTO "LINES" VALUES(3026,16,19,1);
INSERT INTO "LINES" VALUES(3027,16,20,1);
INSERT INTO "LINES" VALUES(3028,16,21,1);
INSERT INTO "LINES" VALUES(3029,16,22,1);
INSERT INTO "LINES" VALUES(3030,16,23,1);
INSERT INTO "LINES" VALUES(3031,16,24,1);
INSERT INTO "LINES" VALUES(3032,16,25,1);
INSERT INTO "LINES" VALUES(3033,16,26,1);
INSERT INTO "LINES" VALUES(3034,16,27,1);
INSERT INTO "LINES" VALUES(3035,16,28,1);
INSERT INTO "LINES" VALUES(3036,16,29,1);
INSERT INTO "LINES" VALUES(3037,16,30,1);
INSERT INTO "LINES" VALUES(3038,16,31,1);
INSERT INTO "LINES" VALUES(3039,16,32,1);
INSERT INTO "LINES" VALUES(3040,16,33,1);
INSERT INTO "LINES" VALUES(3041,16,34,1);
INSERT INTO "LINES" VALUES(3042,16,35,1);
INSERT INTO "LINES" VALUES(3043,16,36,1);
INSERT INTO "LINES" VALUES(3044,16,37,1);
INSERT INTO "LINES" VALUES(3045,16,38,1);
INSERT INTO "LINES" VALUES(3046,16,39,1);
INSERT INTO "LINES" VALUES(3047,16,40,1);
INSERT INTO "LINES" VALUES(3048,16,41,1);
INSERT INTO "LINES" VALUES(3049,16,42,1);
INSERT INTO "LINES" VALUES(3050,16,43,1);
INSERT INTO "LINES" VALUES(3051,16,44,1);
INSERT INTO "LINES" VALUES(3052,16,45,1);
INSERT INTO "LINES" VALUES(3396,4,18,17);
INSERT INTO "LINES" VALUES(3397,4,17,16);
INSERT INTO "LINES" VALUES(3398,4,16,15);
INSERT INTO "LINES" VALUES(3399,4,15,14);
INSERT INTO "LINES" VALUES(3400,4,14,13);
INSERT INTO "LINES" VALUES(3401,4,13,12);
INSERT INTO "LINES" VALUES(3402,4,12,11);
INSERT INTO "LINES" VALUES(3403,4,11,10);
INSERT INTO "LINES" VALUES(3404,4,10,9);
INSERT INTO "LINES" VALUES(3405,4,9,8);
INSERT INTO "LINES" VALUES(3406,4,8,7);
INSERT INTO "LINES" VALUES(3407,4,7,6);
INSERT INTO "LINES" VALUES(3408,4,6,5);
INSERT INTO "LINES" VALUES(3409,4,5,4);
INSERT INTO "LINES" VALUES(3410,4,4,3);
INSERT INTO "LINES" VALUES(3411,4,3,2);
INSERT INTO "LINES" VALUES(3412,4,2,1);
INSERT INTO "LINES" VALUES(3413,5,26,25);
INSERT INTO "LINES" VALUES(3414,5,25,24);
INSERT INTO "LINES" VALUES(3415,5,24,23);
INSERT INTO "LINES" VALUES(3416,5,23,22);
INSERT INTO "LINES" VALUES(3417,5,22,21);
INSERT INTO "LINES" VALUES(3418,5,21,20);
INSERT INTO "LINES" VALUES(3419,5,20,19);
INSERT INTO "LINES" VALUES(3420,5,19,18);
INSERT INTO "LINES" VALUES(3421,5,18,17);
INSERT INTO "LINES" VALUES(3422,5,17,16);
INSERT INTO "LINES" VALUES(3423,5,16,15);
INSERT INTO "LINES" VALUES(3424,5,15,14);
INSERT INTO "LINES" VALUES(3425,5,14,13);
INSERT INTO "LINES" VALUES(3426,5,13,12);
INSERT INTO "LINES" VALUES(3427,5,12,11);
INSERT INTO "LINES" VALUES(3428,5,11,10);
INSERT INTO "LINES" VALUES(3429,5,10,9);
INSERT INTO "LINES" VALUES(3430,5,9,8);
INSERT INTO "LINES" VALUES(3431,5,8,7);
INSERT INTO "LINES" VALUES(3432,5,7,6);
INSERT INTO "LINES" VALUES(3433,5,6,5);
INSERT INTO "LINES" VALUES(3434,5,5,4);
INSERT INTO "LINES" VALUES(3445,6,55,10);
INSERT INTO "LINES" VALUES(3446,6,54,9);
INSERT INTO "LINES" VALUES(3447,6,53,8);
INSERT INTO "LINES" VALUES(3448,6,52,7);
INSERT INTO "LINES" VALUES(3449,6,51,6);
INSERT INTO "LINES" VALUES(3450,6,50,5);
INSERT INTO "LINES" VALUES(3451,6,49,4);
INSERT INTO "LINES" VALUES(3452,6,48,3);
INSERT INTO "LINES" VALUES(3453,6,47,2);
INSERT INTO "LINES" VALUES(3454,6,46,1);
INSERT INTO "LINES" VALUES(3455,6,1,1);
INSERT INTO "LINES" VALUES(3456,6,2,1);
INSERT INTO "LINES" VALUES(3457,6,3,1);
INSERT INTO "LINES" VALUES(3458,6,4,1);
INSERT INTO "LINES" VALUES(3459,6,5,1);
INSERT INTO "LINES" VALUES(3460,6,6,1);
INSERT INTO "LINES" VALUES(3461,6,7,1);
INSERT INTO "LINES" VALUES(3462,6,8,1);
INSERT INTO "LINES" VALUES(3463,6,9,1);
INSERT INTO "LINES" VALUES(3464,6,10,1);
INSERT INTO "LINES" VALUES(3465,6,11,1);
INSERT INTO "LINES" VALUES(3466,6,12,1);
INSERT INTO "LINES" VALUES(3467,6,13,1);
INSERT INTO "LINES" VALUES(3468,6,14,1);
INSERT INTO "LINES" VALUES(3469,6,15,1);
INSERT INTO "LINES" VALUES(3470,6,16,1);
INSERT INTO "LINES" VALUES(3471,6,17,1);
INSERT INTO "LINES" VALUES(3472,6,18,1);
INSERT INTO "LINES" VALUES(3473,6,19,1);
INSERT INTO "LINES" VALUES(3474,6,20,1);
INSERT INTO "LINES" VALUES(3475,6,21,1);
INSERT INTO "LINES" VALUES(3476,6,22,1);
INSERT INTO "LINES" VALUES(3477,6,23,1);
INSERT INTO "LINES" VALUES(3478,6,24,1);
INSERT INTO "LINES" VALUES(3479,6,25,1);
INSERT INTO "LINES" VALUES(3480,6,26,1);
INSERT INTO "LINES" VALUES(3481,6,27,1);
INSERT INTO "LINES" VALUES(3482,6,28,1);
INSERT INTO "LINES" VALUES(3483,6,29,1);
INSERT INTO "LINES" VALUES(3484,6,30,1);
INSERT INTO "LINES" VALUES(3485,6,31,1);
INSERT INTO "LINES" VALUES(3486,6,32,1);
INSERT INTO "LINES" VALUES(3487,6,33,1);
INSERT INTO "LINES" VALUES(3488,6,34,1);
INSERT INTO "LINES" VALUES(3489,6,35,1);
INSERT INTO "LINES" VALUES(3490,6,36,1);
INSERT INTO "LINES" VALUES(3491,6,37,1);
INSERT INTO "LINES" VALUES(3492,6,38,1);
INSERT INTO "LINES" VALUES(3493,6,39,1);
INSERT INTO "LINES" VALUES(3494,6,40,1);
INSERT INTO "LINES" VALUES(3495,6,41,1);
INSERT INTO "LINES" VALUES(3496,6,42,1);
INSERT INTO "LINES" VALUES(3497,6,43,1);
INSERT INTO "LINES" VALUES(3498,6,44,1);
INSERT INTO "LINES" VALUES(3499,6,45,1);
INSERT INTO "LINES" VALUES(3534,1,87,33);
INSERT INTO "LINES" VALUES(3535,1,86,32);
INSERT INTO "LINES" VALUES(3536,1,85,31);
INSERT INTO "LINES" VALUES(3537,1,84,30);
INSERT INTO "LINES" VALUES(3538,1,83,29);
INSERT INTO "LINES" VALUES(3539,1,82,28);
INSERT INTO "LINES" VALUES(3540,1,81,27);
INSERT INTO "LINES" VALUES(3541,1,80,26);
INSERT INTO "LINES" VALUES(3542,1,79,25);
INSERT INTO "LINES" VALUES(3543,1,78,26);
INSERT INTO "LINES" VALUES(3544,1,77,26);
INSERT INTO "LINES" VALUES(3545,1,76,26);
INSERT INTO "LINES" VALUES(3546,1,75,24);
INSERT INTO "LINES" VALUES(3547,1,74,23);
INSERT INTO "LINES" VALUES(3548,1,73,22);
INSERT INTO "LINES" VALUES(3549,1,72,23);
INSERT INTO "LINES" VALUES(3550,1,71,23);
INSERT INTO "LINES" VALUES(3551,1,70,23);
INSERT INTO "LINES" VALUES(3552,1,69,23);
INSERT INTO "LINES" VALUES(3553,1,68,23);
INSERT INTO "LINES" VALUES(3554,1,67,21);
INSERT INTO "LINES" VALUES(3555,1,66,20);
INSERT INTO "LINES" VALUES(3556,1,65,19);
INSERT INTO "LINES" VALUES(3557,1,64,18);
INSERT INTO "LINES" VALUES(3558,1,63,17);
INSERT INTO "LINES" VALUES(3559,1,62,16);
INSERT INTO "LINES" VALUES(3560,1,61,15);
INSERT INTO "LINES" VALUES(3561,1,60,14);
INSERT INTO "LINES" VALUES(3562,1,59,13);
INSERT INTO "LINES" VALUES(3563,1,58,12);
INSERT INTO "LINES" VALUES(3564,1,57,11);
INSERT INTO "LINES" VALUES(3565,1,56,10);
INSERT INTO "LINES" VALUES(3566,1,55,9);
INSERT INTO "LINES" VALUES(3567,1,54,8);
INSERT INTO "LINES" VALUES(3568,1,53,7);
INSERT INTO "LINES" VALUES(3569,1,52,6);
INSERT INTO "LINES" VALUES(3570,1,51,5);
INSERT INTO "LINES" VALUES(3571,1,50,4);
INSERT INTO "LINES" VALUES(3572,1,49,3);
INSERT INTO "LINES" VALUES(3573,1,48,2);
INSERT INTO "LINES" VALUES(3574,1,47,1);
INSERT INTO "LINES" VALUES(3575,1,46,1);
INSERT INTO "LINES" VALUES(3576,1,1,1);
INSERT INTO "LINES" VALUES(3577,1,2,1);
INSERT INTO "LINES" VALUES(3578,1,3,1);
INSERT INTO "LINES" VALUES(3579,1,4,1);
INSERT INTO "LINES" VALUES(3580,1,5,1);
INSERT INTO "LINES" VALUES(3581,1,6,1);
INSERT INTO "LINES" VALUES(3582,1,7,1);
INSERT INTO "LINES" VALUES(3583,1,8,1);
INSERT INTO "LINES" VALUES(3584,1,9,1);
INSERT INTO "LINES" VALUES(3585,1,10,1);
INSERT INTO "LINES" VALUES(3586,1,11,1);
INSERT INTO "LINES" VALUES(3587,1,12,1);
INSERT INTO "LINES" VALUES(3588,1,13,1);
INSERT INTO "LINES" VALUES(3589,1,14,1);
INSERT INTO "LINES" VALUES(3590,1,15,1);
INSERT INTO "LINES" VALUES(3591,1,16,1);
INSERT INTO "LINES" VALUES(3592,1,17,1);
INSERT INTO "LINES" VALUES(3593,1,18,1);
INSERT INTO "LINES" VALUES(3594,1,19,1);
INSERT INTO "LINES" VALUES(3595,1,20,1);
INSERT INTO "LINES" VALUES(3596,1,21,1);
INSERT INTO "LINES" VALUES(3597,1,22,1);
INSERT INTO "LINES" VALUES(3598,1,23,1);
INSERT INTO "LINES" VALUES(3599,1,24,1);
INSERT INTO "LINES" VALUES(3600,1,25,1);
INSERT INTO "LINES" VALUES(3601,1,26,1);
INSERT INTO "LINES" VALUES(3602,1,27,1);
INSERT INTO "LINES" VALUES(3603,1,28,1);
INSERT INTO "LINES" VALUES(3604,1,29,1);
INSERT INTO "LINES" VALUES(3605,1,30,1);
INSERT INTO "LINES" VALUES(3606,1,31,1);
INSERT INTO "LINES" VALUES(3607,1,32,1);
INSERT INTO "LINES" VALUES(3608,1,33,1);
INSERT INTO "LINES" VALUES(3609,1,34,1);
INSERT INTO "LINES" VALUES(3610,1,35,1);
INSERT INTO "LINES" VALUES(3611,1,36,1);
INSERT INTO "LINES" VALUES(3612,1,37,1);
INSERT INTO "LINES" VALUES(3613,1,38,1);
INSERT INTO "LINES" VALUES(3614,1,39,1);
INSERT INTO "LINES" VALUES(3615,1,40,1);
INSERT INTO "LINES" VALUES(3616,1,41,1);
INSERT INTO "LINES" VALUES(3617,1,42,1);
INSERT INTO "LINES" VALUES(3618,1,43,1);
INSERT INTO "LINES" VALUES(3619,1,44,1);
INSERT INTO "LINES" VALUES(3620,1,45,1);
INSERT INTO "LINES" VALUES(3621,3,80,34);
INSERT INTO "LINES" VALUES(3622,3,79,33);
INSERT INTO "LINES" VALUES(3623,3,78,32);
INSERT INTO "LINES" VALUES(3624,3,77,31);
INSERT INTO "LINES" VALUES(3625,3,76,30);
INSERT INTO "LINES" VALUES(3626,3,75,29);
INSERT INTO "LINES" VALUES(3627,3,74,28);
INSERT INTO "LINES" VALUES(3628,3,73,27);
INSERT INTO "LINES" VALUES(3629,3,72,26);
INSERT INTO "LINES" VALUES(3630,3,71,25);
INSERT INTO "LINES" VALUES(3631,3,70,24);
INSERT INTO "LINES" VALUES(3632,3,69,23);
INSERT INTO "LINES" VALUES(3633,3,68,22);
INSERT INTO "LINES" VALUES(3634,3,67,21);
INSERT INTO "LINES" VALUES(3635,3,66,20);
INSERT INTO "LINES" VALUES(3636,3,65,19);
INSERT INTO "LINES" VALUES(3637,3,64,18);
INSERT INTO "LINES" VALUES(3638,3,63,17);
INSERT INTO "LINES" VALUES(3639,3,62,16);
INSERT INTO "LINES" VALUES(3640,3,61,15);
INSERT INTO "LINES" VALUES(3641,3,60,14);
INSERT INTO "LINES" VALUES(3642,3,59,13);
INSERT INTO "LINES" VALUES(3643,3,58,12);
INSERT INTO "LINES" VALUES(3644,3,57,11);
INSERT INTO "LINES" VALUES(3645,3,56,10);
INSERT INTO "LINES" VALUES(3646,3,55,9);
INSERT INTO "LINES" VALUES(3647,3,54,8);
INSERT INTO "LINES" VALUES(3648,3,53,7);
INSERT INTO "LINES" VALUES(3649,3,52,6);
INSERT INTO "LINES" VALUES(3650,3,51,5);
INSERT INTO "LINES" VALUES(3651,3,50,4);
INSERT INTO "LINES" VALUES(3652,3,49,4);
INSERT INTO "LINES" VALUES(3653,3,48,3);
INSERT INTO "LINES" VALUES(3654,3,47,2);
INSERT INTO "LINES" VALUES(3655,3,46,1);
INSERT INTO "LINES" VALUES(3656,3,1,1);
INSERT INTO "LINES" VALUES(3657,3,2,1);
INSERT INTO "LINES" VALUES(3658,3,3,1);
INSERT INTO "LINES" VALUES(3659,3,4,1);
INSERT INTO "LINES" VALUES(3660,3,5,1);
INSERT INTO "LINES" VALUES(3661,3,6,1);
INSERT INTO "LINES" VALUES(3662,3,7,1);
INSERT INTO "LINES" VALUES(3663,3,8,1);
INSERT INTO "LINES" VALUES(3664,3,9,1);
INSERT INTO "LINES" VALUES(3665,3,10,1);
INSERT INTO "LINES" VALUES(3666,3,11,1);
INSERT INTO "LINES" VALUES(3667,3,12,1);
INSERT INTO "LINES" VALUES(3668,3,13,1);
INSERT INTO "LINES" VALUES(3669,3,14,1);
INSERT INTO "LINES" VALUES(3670,3,15,1);
INSERT INTO "LINES" VALUES(3671,3,16,1);
INSERT INTO "LINES" VALUES(3672,3,17,1);
INSERT INTO "LINES" VALUES(3673,3,18,1);
INSERT INTO "LINES" VALUES(3674,3,19,1);
INSERT INTO "LINES" VALUES(3675,3,20,1);
INSERT INTO "LINES" VALUES(3676,3,21,1);
INSERT INTO "LINES" VALUES(3677,3,22,1);
INSERT INTO "LINES" VALUES(3678,3,23,1);
INSERT INTO "LINES" VALUES(3679,3,24,1);
INSERT INTO "LINES" VALUES(3680,3,25,1);
INSERT INTO "LINES" VALUES(3681,3,26,1);
INSERT INTO "LINES" VALUES(3682,3,27,1);
INSERT INTO "LINES" VALUES(3683,3,28,1);
INSERT INTO "LINES" VALUES(3684,3,29,1);
INSERT INTO "LINES" VALUES(3685,3,30,1);
INSERT INTO "LINES" VALUES(3686,3,31,1);
INSERT INTO "LINES" VALUES(3687,3,32,1);
INSERT INTO "LINES" VALUES(3688,3,33,1);
INSERT INTO "LINES" VALUES(3689,3,34,1);
INSERT INTO "LINES" VALUES(3690,3,35,1);
INSERT INTO "LINES" VALUES(3691,3,36,1);
INSERT INTO "LINES" VALUES(3692,3,37,1);
INSERT INTO "LINES" VALUES(3693,3,38,1);
INSERT INTO "LINES" VALUES(3694,3,39,1);
INSERT INTO "LINES" VALUES(3695,3,40,1);
INSERT INTO "LINES" VALUES(3696,3,41,1);
INSERT INTO "LINES" VALUES(3697,3,42,1);
INSERT INTO "LINES" VALUES(3698,3,43,1);
INSERT INTO "LINES" VALUES(3699,3,44,1);
INSERT INTO "LINES" VALUES(3700,3,45,1);
INSERT INTO "LINES" VALUES(3707,2,63,17);
INSERT INTO "LINES" VALUES(3708,2,62,16);
INSERT INTO "LINES" VALUES(3709,2,61,15);
INSERT INTO "LINES" VALUES(3710,2,60,14);
INSERT INTO "LINES" VALUES(3711,2,59,13);
INSERT INTO "LINES" VALUES(3712,2,58,12);
INSERT INTO "LINES" VALUES(3713,2,57,11);
INSERT INTO "LINES" VALUES(3714,2,56,10);
INSERT INTO "LINES" VALUES(3715,2,55,9);
INSERT INTO "LINES" VALUES(3716,2,54,8);
INSERT INTO "LINES" VALUES(3717,2,53,7);
INSERT INTO "LINES" VALUES(3718,2,52,6);
INSERT INTO "LINES" VALUES(3719,2,51,6);
INSERT INTO "LINES" VALUES(3720,2,50,5);
INSERT INTO "LINES" VALUES(3721,2,49,4);
INSERT INTO "LINES" VALUES(3722,2,48,3);
INSERT INTO "LINES" VALUES(3723,2,47,2);
INSERT INTO "LINES" VALUES(3724,2,46,1);
INSERT INTO "LINES" VALUES(3725,2,1,1);
INSERT INTO "LINES" VALUES(3726,2,2,1);
INSERT INTO "LINES" VALUES(3727,2,3,1);
INSERT INTO "LINES" VALUES(3728,2,4,1);
INSERT INTO "LINES" VALUES(3729,2,5,1);
INSERT INTO "LINES" VALUES(3730,2,6,1);
INSERT INTO "LINES" VALUES(3731,2,7,1);
INSERT INTO "LINES" VALUES(3732,2,8,1);
INSERT INTO "LINES" VALUES(3733,2,9,1);
INSERT INTO "LINES" VALUES(3734,2,10,1);
INSERT INTO "LINES" VALUES(3735,2,11,1);
INSERT INTO "LINES" VALUES(3736,2,12,1);
INSERT INTO "LINES" VALUES(3737,2,13,1);
INSERT INTO "LINES" VALUES(3738,2,14,1);
INSERT INTO "LINES" VALUES(3739,2,15,1);
INSERT INTO "LINES" VALUES(3740,2,16,1);
INSERT INTO "LINES" VALUES(3741,2,17,1);
INSERT INTO "LINES" VALUES(3742,2,18,1);
INSERT INTO "LINES" VALUES(3743,2,19,1);
INSERT INTO "LINES" VALUES(3744,2,20,1);
INSERT INTO "LINES" VALUES(3745,2,21,1);
INSERT INTO "LINES" VALUES(3746,2,22,1);
INSERT INTO "LINES" VALUES(3747,2,23,1);
INSERT INTO "LINES" VALUES(3748,2,24,1);
INSERT INTO "LINES" VALUES(3749,2,25,1);
INSERT INTO "LINES" VALUES(3750,2,26,1);
INSERT INTO "LINES" VALUES(3751,2,27,1);
INSERT INTO "LINES" VALUES(3752,2,28,1);
INSERT INTO "LINES" VALUES(3753,2,29,1);
INSERT INTO "LINES" VALUES(3754,2,30,1);
INSERT INTO "LINES" VALUES(3755,2,31,1);
INSERT INTO "LINES" VALUES(3756,2,32,1);
INSERT INTO "LINES" VALUES(3757,2,33,1);
INSERT INTO "LINES" VALUES(3758,2,34,1);
INSERT INTO "LINES" VALUES(3759,2,35,1);
INSERT INTO "LINES" VALUES(3760,2,36,1);
INSERT INTO "LINES" VALUES(3761,2,37,1);
INSERT INTO "LINES" VALUES(3762,2,38,1);
INSERT INTO "LINES" VALUES(3763,2,39,1);
INSERT INTO "LINES" VALUES(3764,2,40,1);
INSERT INTO "LINES" VALUES(3765,2,41,1);
INSERT INTO "LINES" VALUES(3766,2,42,1);
INSERT INTO "LINES" VALUES(3767,2,43,1);
INSERT INTO "LINES" VALUES(3768,2,44,1);
INSERT INTO "LINES" VALUES(3769,2,45,1);
CREATE TABLE `LINES_REPLACEMENTS` (`line_id`  INTEGER NOT NULL,`replacement_id`  INTEGER NOT NULL,PRIMARY KEY(line_id, replacement_id), FOREIGN KEY(`line_id`) REFERENCES LINES(id), FOREIGN KEY(`replacement_id`) REFERENCES REPLACEMENTS(id) );
CREATE TABLE `RELATIONS` (`file_id`  INTEGER NOT NULL,`dep_id`   INTEGER NOT NULL,`dependency_timestamp` DATETIME NOT NULL,PRIMARY KEY(file_id, dep_id), FOREIGN KEY(`file_id`) REFERENCES FILES(id), FOREIGN KEY(`dep_id`) REFERENCES FILES(id) );
INSERT INTO "RELATIONS" VALUES(7,8,1427729547);
INSERT INTO "RELATIONS" VALUES(7,9,1427729577);
INSERT INTO "RELATIONS" VALUES(7,12,1427220376);
INSERT INTO "RELATIONS" VALUES(7,13,1427397043);
INSERT INTO "RELATIONS" VALUES(10,9,1427729577);
INSERT INTO "RELATIONS" VALUES(10,11,1427218446);
INSERT INTO "RELATIONS" VALUES(10,12,1427220376);
INSERT INTO "RELATIONS" VALUES(10,14,1427214610);
INSERT INTO "RELATIONS" VALUES(17,9,1427466505);
INSERT INTO "RELATIONS" VALUES(17,18,1427461573);
INSERT INTO "RELATIONS" VALUES(17,12,1427220376);
INSERT INTO "RELATIONS" VALUES(17,19,1427212284);
CREATE TABLE `REPLACEMENTS` (`id`  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`file_id`   INTEGER NOT NULL,`start_line` INTEGER NOT NULL,`lines_replaced` INTEGER NOT NULL,`lines_in_replacement` INTEGER NOT NULL,`comes_from_start_line` INTEGER NOT NULL,`comes_from_end_line` INTEGER NOT NULL,`comes_from_file_id` INTEGER NOT NULL,`transformation_id` INTEGER NOT NULL,`unhandled` INTEGER DEFAULT(1),`replacement_text` TEXT NOT NULL,FOREIGN KEY(`file_id`) REFERENCES FILES(id), FOREIGN KEY(`comes_from_file_id`) REFERENCES FILES(id), FOREIGN KEY(`transformation_id`) REFERENCES TRANSFORMATIONS(id) );
INSERT INTO "REPLACEMENTS" VALUES(1,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(2,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(3,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(4,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(5,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(6,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(7,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(8,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(9,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(10,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(11,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(12,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(13,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(14,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(15,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(16,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(17,15,26,0,5,26,26,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(18,15,29,0,3,29,29,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(19,15,30,0,0,30,30,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(20,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(21,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(22,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(23,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(24,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(25,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(26,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(27,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(28,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(29,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(30,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(31,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(32,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(33,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(34,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(35,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(36,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(37,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(38,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(39,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(40,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(41,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(42,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(43,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(44,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(45,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(46,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(47,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(48,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(49,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(50,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(51,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(52,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(53,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(54,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(55,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(56,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(57,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(58,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(59,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(60,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(61,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(62,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(63,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(64,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(65,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(66,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(67,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(68,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(69,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(70,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(71,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(72,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(73,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(74,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(75,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(76,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(77,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(78,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(79,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(80,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(81,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(82,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(83,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(84,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(85,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(86,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(87,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(88,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(89,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(90,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(91,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(92,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(93,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(94,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(95,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(96,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(97,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(98,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(99,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(100,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(101,6,1,0,45,1,1,6,9,1,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(102,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(103,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(104,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
CREATE TABLE `TRANSFORMATIONS` (`id`  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`name` TEXT NOT NULL);
INSERT INTO "TRANSFORMATIONS" VALUES(1,'MultipleTransforms');
INSERT INTO "TRANSFORMATIONS" VALUES(9,'ReplaceRvalueRef');
DELETE FROM "sqlite_sequence";
INSERT INTO "sqlite_sequence" VALUES('FILES',19);
INSERT INTO "sqlite_sequence" VALUES('LINES',3769);
INSERT INTO "sqlite_sequence" VALUES('TRANSFORMATIONS',104);
INSERT INTO "sqlite_sequence" VALUES('REPLACEMENTS',104);
CREATE UNIQUE INDEX FILES_INDEX ON FILES (path);
CREATE UNIQUE INDEX FILES_INDEX_ID ON FILES (id);
CREATE UNIQUE INDEX COMP_UNIT_INDEX ON COMPILATION_UNIT (id);
CREATE INDEX RELATIONS_INDEX ON RELATIONS (file_id, dep_id);
CREATE UNIQUE INDEX TRANSFORMATIONS_INDEX_NAME ON TRANSFORMATIONS (name);
CREATE UNIQUE INDEX TRANSFORMATIONS_INDEX_ID ON TRANSFORMATIONS (id);
CREATE UNIQUE INDEX REPLACEMENT_INDEX_4 ON REPLACEMENTS (id, file_id, start_line, lines_replaced, replacement_text);
CREATE UNIQUE INDEX REPLACEMENT_INDEX_1 ON REPLACEMENTS (id);
CREATE INDEX REPLACEMENT_INDEX_3 ON REPLACEMENTS (transformation_id);
CREATE INDEX REPLACEMENT_INDEX_2 ON REPLACEMENTS (file_id);
CREATE UNIQUE INDEX LINES_INDEX_FILE_ID_LINE ON LINES (file_id, line);
CREATE UNIQUE INDEX LINES_INDEX_ID ON LINES (id);
CREATE UNIQUE INDEX LINES_REPLACEMENTS_INDEX_LINE_ID_REPLACEMENT_ID ON LINES_REPLACEMENTS (line_id, replacement_id);
CREATE INDEX LINES_REPLACEMENTS_INDEX_REPLACEMENT_ID ON LINES_REPLACEMENTS (replacement_id);
CREATE INDEX LINES_REPLACEMENTS_INDEX_ID ON LINES_REPLACEMENTS (line_id);
COMMIT;