BEGIN TRANSACTION;
CREATE TABLE `COMPILATION_UNIT` ( `id`   INTEGER NOT NULL PRIMARY KEY,`timestamp`    DATETIME NOT NULL, `cmd_args` TEXT NOT NULL, FOREIGN KEY(`id`) REFERENCES FILES(id) );
INSERT INTO "COMPILATION_UNIT" VALUES(7,1427387312,' cl.exe -c work/A.cpp -o2');
INSERT INTO "COMPILATION_UNIT" VALUES(10,1427215320,' cl.exe -c work/B.cpp -o2');
INSERT INTO "COMPILATION_UNIT" VALUES(17,1427461578,' cl.exe -c work/C.cpp -o2');
CREATE TABLE `FILES` ( `id`   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`number_of_lines` INTEGER,`path` TEXT NOT NULL);
INSERT INTO "FILES" VALUES(1,42,'work/temp/A.cpp');
INSERT INTO "FILES" VALUES(2,18,'work/temp/A.h');
INSERT INTO "FILES" VALUES(3,35,'work/temp/All.h');
INSERT INTO "FILES" VALUES(4,NULL,'work/temp/B.cpp');
INSERT INTO "FILES" VALUES(5,NULL,'work/temp/B.h');
INSERT INTO "FILES" VALUES(6,10,'work/temp/IncAll.h');
INSERT INTO "FILES" VALUES(7,NULL,'work/A.cpp');
INSERT INTO "FILES" VALUES(8,NULL,'work/A.h');
INSERT INTO "FILES" VALUES(9,NULL,'work/All.h');
INSERT INTO "FILES" VALUES(10,NULL,'work/B.cpp');
INSERT INTO "FILES" VALUES(11,NULL,'work/B.h');
INSERT INTO "FILES" VALUES(12,NULL,'work/IncAll.h');
INSERT INTO "FILES" VALUES(13,NULL,'work/OnlyA.h');
INSERT INTO "FILES" VALUES(14,NULL,'work/OnlyB.h');
INSERT INTO "FILES" VALUES(15,42,'work/temp/C.cpp');
INSERT INTO "FILES" VALUES(16,21,'work/temp/C.h');
INSERT INTO "FILES" VALUES(17,NULL,'work/C.cpp');
INSERT INTO "FILES" VALUES(18,NULL,'work/C.h');
INSERT INTO "FILES" VALUES(19,NULL,'work/OnlyC.h');
CREATE TABLE `LINES` (`id`   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`file_id`  INTEGER NOT NULL,`line`  INTEGER NOT NULL,`original_line`  INTEGER NOT NULL,FOREIGN KEY(`file_id`) REFERENCES FILES(id) );
INSERT INTO "LINES" VALUES(3396,4,18,17);
INSERT INTO "LINES" VALUES(3397,4,17,16);
INSERT INTO "LINES" VALUES(3398,4,16,15);
INSERT INTO "LINES" VALUES(3399,4,15,14);
INSERT INTO "LINES" VALUES(3400,4,14,13);
INSERT INTO "LINES" VALUES(3401,4,13,12);
INSERT INTO "LINES" VALUES(3402,4,12,11);
INSERT INTO "LINES" VALUES(3403,4,11,10);
INSERT INTO "LINES" VALUES(3404,4,10,9);
INSERT INTO "LINES" VALUES(3405,4,9,8);
INSERT INTO "LINES" VALUES(3406,4,8,7);
INSERT INTO "LINES" VALUES(3407,4,7,6);
INSERT INTO "LINES" VALUES(3408,4,6,5);
INSERT INTO "LINES" VALUES(3409,4,5,4);
INSERT INTO "LINES" VALUES(3410,4,4,3);
INSERT INTO "LINES" VALUES(3411,4,3,2);
INSERT INTO "LINES" VALUES(3412,4,2,1);
INSERT INTO "LINES" VALUES(3413,5,26,25);
INSERT INTO "LINES" VALUES(3414,5,25,24);
INSERT INTO "LINES" VALUES(3415,5,24,23);
INSERT INTO "LINES" VALUES(3416,5,23,22);
INSERT INTO "LINES" VALUES(3417,5,22,21);
INSERT INTO "LINES" VALUES(3418,5,21,20);
INSERT INTO "LINES" VALUES(3419,5,20,19);
INSERT INTO "LINES" VALUES(3420,5,19,18);
INSERT INTO "LINES" VALUES(3421,5,18,17);
INSERT INTO "LINES" VALUES(3422,5,17,16);
INSERT INTO "LINES" VALUES(3423,5,16,15);
INSERT INTO "LINES" VALUES(3424,5,15,14);
INSERT INTO "LINES" VALUES(3425,5,14,13);
INSERT INTO "LINES" VALUES(3426,5,13,12);
INSERT INTO "LINES" VALUES(3427,5,12,11);
INSERT INTO "LINES" VALUES(3428,5,11,10);
INSERT INTO "LINES" VALUES(3429,5,10,9);
INSERT INTO "LINES" VALUES(3430,5,9,8);
INSERT INTO "LINES" VALUES(3431,5,8,7);
INSERT INTO "LINES" VALUES(3432,5,7,6);
INSERT INTO "LINES" VALUES(3433,5,6,5);
INSERT INTO "LINES" VALUES(3434,5,5,4);
INSERT INTO "LINES" VALUES(3534,1,87,33);
INSERT INTO "LINES" VALUES(3535,1,86,32);
INSERT INTO "LINES" VALUES(3536,1,85,31);
INSERT INTO "LINES" VALUES(3537,1,84,30);
INSERT INTO "LINES" VALUES(3538,1,83,29);
INSERT INTO "LINES" VALUES(3539,1,82,28);
INSERT INTO "LINES" VALUES(3540,1,81,27);
INSERT INTO "LINES" VALUES(3541,1,80,26);
INSERT INTO "LINES" VALUES(3542,1,79,25);
INSERT INTO "LINES" VALUES(3543,1,78,26);
INSERT INTO "LINES" VALUES(3544,1,77,26);
INSERT INTO "LINES" VALUES(3545,1,76,26);
INSERT INTO "LINES" VALUES(3546,1,75,24);
INSERT INTO "LINES" VALUES(3547,1,74,23);
INSERT INTO "LINES" VALUES(3548,1,73,22);
INSERT INTO "LINES" VALUES(3549,1,72,23);
INSERT INTO "LINES" VALUES(3550,1,71,23);
INSERT INTO "LINES" VALUES(3551,1,70,23);
INSERT INTO "LINES" VALUES(3552,1,69,23);
INSERT INTO "LINES" VALUES(3553,1,68,23);
INSERT INTO "LINES" VALUES(3554,1,67,21);
INSERT INTO "LINES" VALUES(3555,1,66,20);
INSERT INTO "LINES" VALUES(3556,1,65,19);
INSERT INTO "LINES" VALUES(3557,1,64,18);
INSERT INTO "LINES" VALUES(3558,1,63,17);
INSERT INTO "LINES" VALUES(3559,1,62,16);
INSERT INTO "LINES" VALUES(3560,1,61,15);
INSERT INTO "LINES" VALUES(3561,1,60,14);
INSERT INTO "LINES" VALUES(3562,1,59,13);
INSERT INTO "LINES" VALUES(3563,1,58,12);
INSERT INTO "LINES" VALUES(3564,1,57,11);
INSERT INTO "LINES" VALUES(3565,1,56,10);
INSERT INTO "LINES" VALUES(3566,1,55,9);
INSERT INTO "LINES" VALUES(3567,1,54,8);
INSERT INTO "LINES" VALUES(3568,1,53,7);
INSERT INTO "LINES" VALUES(3569,1,52,6);
INSERT INTO "LINES" VALUES(3570,1,51,5);
INSERT INTO "LINES" VALUES(3571,1,50,4);
INSERT INTO "LINES" VALUES(3572,1,49,3);
INSERT INTO "LINES" VALUES(3573,1,48,2);
INSERT INTO "LINES" VALUES(3574,1,47,1);
INSERT INTO "LINES" VALUES(3575,1,46,1);
INSERT INTO "LINES" VALUES(3576,1,1,1);
INSERT INTO "LINES" VALUES(3577,1,2,1);
INSERT INTO "LINES" VALUES(3578,1,3,1);
INSERT INTO "LINES" VALUES(3579,1,4,1);
INSERT INTO "LINES" VALUES(3580,1,5,1);
INSERT INTO "LINES" VALUES(3581,1,6,1);
INSERT INTO "LINES" VALUES(3582,1,7,1);
INSERT INTO "LINES" VALUES(3583,1,8,1);
INSERT INTO "LINES" VALUES(3584,1,9,1);
INSERT INTO "LINES" VALUES(3585,1,10,1);
INSERT INTO "LINES" VALUES(3586,1,11,1);
INSERT INTO "LINES" VALUES(3587,1,12,1);
INSERT INTO "LINES" VALUES(3588,1,13,1);
INSERT INTO "LINES" VALUES(3589,1,14,1);
INSERT INTO "LINES" VALUES(3590,1,15,1);
INSERT INTO "LINES" VALUES(3591,1,16,1);
INSERT INTO "LINES" VALUES(3592,1,17,1);
INSERT INTO "LINES" VALUES(3593,1,18,1);
INSERT INTO "LINES" VALUES(3594,1,19,1);
INSERT INTO "LINES" VALUES(3595,1,20,1);
INSERT INTO "LINES" VALUES(3596,1,21,1);
INSERT INTO "LINES" VALUES(3597,1,22,1);
INSERT INTO "LINES" VALUES(3598,1,23,1);
INSERT INTO "LINES" VALUES(3599,1,24,1);
INSERT INTO "LINES" VALUES(3600,1,25,1);
INSERT INTO "LINES" VALUES(3601,1,26,1);
INSERT INTO "LINES" VALUES(3602,1,27,1);
INSERT INTO "LINES" VALUES(3603,1,28,1);
INSERT INTO "LINES" VALUES(3604,1,29,1);
INSERT INTO "LINES" VALUES(3605,1,30,1);
INSERT INTO "LINES" VALUES(3606,1,31,1);
INSERT INTO "LINES" VALUES(3607,1,32,1);
INSERT INTO "LINES" VALUES(3608,1,33,1);
INSERT INTO "LINES" VALUES(3609,1,34,1);
INSERT INTO "LINES" VALUES(3610,1,35,1);
INSERT INTO "LINES" VALUES(3611,1,36,1);
INSERT INTO "LINES" VALUES(3612,1,37,1);
INSERT INTO "LINES" VALUES(3613,1,38,1);
INSERT INTO "LINES" VALUES(3614,1,39,1);
INSERT INTO "LINES" VALUES(3615,1,40,1);
INSERT INTO "LINES" VALUES(3616,1,41,1);
INSERT INTO "LINES" VALUES(3617,1,42,1);
INSERT INTO "LINES" VALUES(3618,1,43,1);
INSERT INTO "LINES" VALUES(3619,1,44,1);
INSERT INTO "LINES" VALUES(3620,1,45,1);
INSERT INTO "LINES" VALUES(3707,2,63,17);
INSERT INTO "LINES" VALUES(3708,2,62,16);
INSERT INTO "LINES" VALUES(3709,2,61,15);
INSERT INTO "LINES" VALUES(3710,2,60,14);
INSERT INTO "LINES" VALUES(3711,2,59,13);
INSERT INTO "LINES" VALUES(3712,2,58,12);
INSERT INTO "LINES" VALUES(3713,2,57,11);
INSERT INTO "LINES" VALUES(3714,2,56,10);
INSERT INTO "LINES" VALUES(3715,2,55,9);
INSERT INTO "LINES" VALUES(3716,2,54,8);
INSERT INTO "LINES" VALUES(3717,2,53,7);
INSERT INTO "LINES" VALUES(3718,2,52,6);
INSERT INTO "LINES" VALUES(3719,2,51,6);
INSERT INTO "LINES" VALUES(3720,2,50,5);
INSERT INTO "LINES" VALUES(3721,2,49,4);
INSERT INTO "LINES" VALUES(3722,2,48,3);
INSERT INTO "LINES" VALUES(3723,2,47,2);
INSERT INTO "LINES" VALUES(3724,2,46,1);
INSERT INTO "LINES" VALUES(3725,2,1,1);
INSERT INTO "LINES" VALUES(3726,2,2,1);
INSERT INTO "LINES" VALUES(3727,2,3,1);
INSERT INTO "LINES" VALUES(3728,2,4,1);
INSERT INTO "LINES" VALUES(3729,2,5,1);
INSERT INTO "LINES" VALUES(3730,2,6,1);
INSERT INTO "LINES" VALUES(3731,2,7,1);
INSERT INTO "LINES" VALUES(3732,2,8,1);
INSERT INTO "LINES" VALUES(3733,2,9,1);
INSERT INTO "LINES" VALUES(3734,2,10,1);
INSERT INTO "LINES" VALUES(3735,2,11,1);
INSERT INTO "LINES" VALUES(3736,2,12,1);
INSERT INTO "LINES" VALUES(3737,2,13,1);
INSERT INTO "LINES" VALUES(3738,2,14,1);
INSERT INTO "LINES" VALUES(3739,2,15,1);
INSERT INTO "LINES" VALUES(3740,2,16,1);
INSERT INTO "LINES" VALUES(3741,2,17,1);
INSERT INTO "LINES" VALUES(3742,2,18,1);
INSERT INTO "LINES" VALUES(3743,2,19,1);
INSERT INTO "LINES" VALUES(3744,2,20,1);
INSERT INTO "LINES" VALUES(3745,2,21,1);
INSERT INTO "LINES" VALUES(3746,2,22,1);
INSERT INTO "LINES" VALUES(3747,2,23,1);
INSERT INTO "LINES" VALUES(3748,2,24,1);
INSERT INTO "LINES" VALUES(3749,2,25,1);
INSERT INTO "LINES" VALUES(3750,2,26,1);
INSERT INTO "LINES" VALUES(3751,2,27,1);
INSERT INTO "LINES" VALUES(3752,2,28,1);
INSERT INTO "LINES" VALUES(3753,2,29,1);
INSERT INTO "LINES" VALUES(3754,2,30,1);
INSERT INTO "LINES" VALUES(3755,2,31,1);
INSERT INTO "LINES" VALUES(3756,2,32,1);
INSERT INTO "LINES" VALUES(3757,2,33,1);
INSERT INTO "LINES" VALUES(3758,2,34,1);
INSERT INTO "LINES" VALUES(3759,2,35,1);
INSERT INTO "LINES" VALUES(3760,2,36,1);
INSERT INTO "LINES" VALUES(3761,2,37,1);
INSERT INTO "LINES" VALUES(3762,2,38,1);
INSERT INTO "LINES" VALUES(3763,2,39,1);
INSERT INTO "LINES" VALUES(3764,2,40,1);
INSERT INTO "LINES" VALUES(3765,2,41,1);
INSERT INTO "LINES" VALUES(3766,2,42,1);
INSERT INTO "LINES" VALUES(3767,2,43,1);
INSERT INTO "LINES" VALUES(3768,2,44,1);
INSERT INTO "LINES" VALUES(3769,2,45,1);
INSERT INTO "LINES" VALUES(3834,16,21,20);
INSERT INTO "LINES" VALUES(3835,16,20,19);
INSERT INTO "LINES" VALUES(3836,16,19,18);
INSERT INTO "LINES" VALUES(3837,16,18,17);
INSERT INTO "LINES" VALUES(3838,16,17,16);
INSERT INTO "LINES" VALUES(3839,16,16,15);
INSERT INTO "LINES" VALUES(3840,16,15,14);
INSERT INTO "LINES" VALUES(3841,16,14,13);
INSERT INTO "LINES" VALUES(3842,16,13,12);
INSERT INTO "LINES" VALUES(3843,16,12,11);
INSERT INTO "LINES" VALUES(3844,16,11,10);
INSERT INTO "LINES" VALUES(3845,16,10,9);
INSERT INTO "LINES" VALUES(3846,16,9,8);
INSERT INTO "LINES" VALUES(3847,16,8,7);
INSERT INTO "LINES" VALUES(3848,16,7,6);
INSERT INTO "LINES" VALUES(3849,16,6,5);
INSERT INTO "LINES" VALUES(3850,16,5,4);
INSERT INTO "LINES" VALUES(3940,3,80,34);
INSERT INTO "LINES" VALUES(3941,3,79,33);
INSERT INTO "LINES" VALUES(3942,3,78,32);
INSERT INTO "LINES" VALUES(3943,3,77,31);
INSERT INTO "LINES" VALUES(3944,3,76,30);
INSERT INTO "LINES" VALUES(3945,3,75,29);
INSERT INTO "LINES" VALUES(3946,3,74,28);
INSERT INTO "LINES" VALUES(3947,3,73,27);
INSERT INTO "LINES" VALUES(3948,3,72,26);
INSERT INTO "LINES" VALUES(3949,3,71,25);
INSERT INTO "LINES" VALUES(3950,3,70,24);
INSERT INTO "LINES" VALUES(3951,3,69,23);
INSERT INTO "LINES" VALUES(3952,3,68,22);
INSERT INTO "LINES" VALUES(3953,3,67,21);
INSERT INTO "LINES" VALUES(3954,3,66,20);
INSERT INTO "LINES" VALUES(3955,3,65,19);
INSERT INTO "LINES" VALUES(3956,3,64,18);
INSERT INTO "LINES" VALUES(3957,3,63,17);
INSERT INTO "LINES" VALUES(3958,3,62,16);
INSERT INTO "LINES" VALUES(3959,3,61,15);
INSERT INTO "LINES" VALUES(3960,3,60,14);
INSERT INTO "LINES" VALUES(3961,3,59,13);
INSERT INTO "LINES" VALUES(3962,3,58,12);
INSERT INTO "LINES" VALUES(3963,3,57,11);
INSERT INTO "LINES" VALUES(3964,3,56,10);
INSERT INTO "LINES" VALUES(3965,3,55,9);
INSERT INTO "LINES" VALUES(3966,3,54,8);
INSERT INTO "LINES" VALUES(3967,3,53,7);
INSERT INTO "LINES" VALUES(3968,3,52,6);
INSERT INTO "LINES" VALUES(3969,3,51,5);
INSERT INTO "LINES" VALUES(3970,3,50,4);
INSERT INTO "LINES" VALUES(3971,3,49,4);
INSERT INTO "LINES" VALUES(3972,3,48,3);
INSERT INTO "LINES" VALUES(3973,3,47,2);
INSERT INTO "LINES" VALUES(3974,3,46,1);
INSERT INTO "LINES" VALUES(3975,3,1,1);
INSERT INTO "LINES" VALUES(3976,3,2,1);
INSERT INTO "LINES" VALUES(3977,3,3,1);
INSERT INTO "LINES" VALUES(3978,3,4,1);
INSERT INTO "LINES" VALUES(3979,3,5,1);
INSERT INTO "LINES" VALUES(3980,3,6,1);
INSERT INTO "LINES" VALUES(3981,3,7,1);
INSERT INTO "LINES" VALUES(3982,3,8,1);
INSERT INTO "LINES" VALUES(3983,3,9,1);
INSERT INTO "LINES" VALUES(3984,3,10,1);
INSERT INTO "LINES" VALUES(3985,3,11,1);
INSERT INTO "LINES" VALUES(3986,3,12,1);
INSERT INTO "LINES" VALUES(3987,3,13,1);
INSERT INTO "LINES" VALUES(3988,3,14,1);
INSERT INTO "LINES" VALUES(3989,3,15,1);
INSERT INTO "LINES" VALUES(3990,3,16,1);
INSERT INTO "LINES" VALUES(3991,3,17,1);
INSERT INTO "LINES" VALUES(3992,3,18,1);
INSERT INTO "LINES" VALUES(3993,3,19,1);
INSERT INTO "LINES" VALUES(3994,3,20,1);
INSERT INTO "LINES" VALUES(3995,3,21,1);
INSERT INTO "LINES" VALUES(3996,3,22,1);
INSERT INTO "LINES" VALUES(3997,3,23,1);
INSERT INTO "LINES" VALUES(3998,3,24,1);
INSERT INTO "LINES" VALUES(3999,3,25,1);
INSERT INTO "LINES" VALUES(4000,3,26,1);
INSERT INTO "LINES" VALUES(4001,3,27,1);
INSERT INTO "LINES" VALUES(4002,3,28,1);
INSERT INTO "LINES" VALUES(4003,3,29,1);
INSERT INTO "LINES" VALUES(4004,3,30,1);
INSERT INTO "LINES" VALUES(4005,3,31,1);
INSERT INTO "LINES" VALUES(4006,3,32,1);
INSERT INTO "LINES" VALUES(4007,3,33,1);
INSERT INTO "LINES" VALUES(4008,3,34,1);
INSERT INTO "LINES" VALUES(4009,3,35,1);
INSERT INTO "LINES" VALUES(4010,3,36,1);
INSERT INTO "LINES" VALUES(4011,3,37,1);
INSERT INTO "LINES" VALUES(4012,3,38,1);
INSERT INTO "LINES" VALUES(4013,3,39,1);
INSERT INTO "LINES" VALUES(4014,3,40,1);
INSERT INTO "LINES" VALUES(4015,3,41,1);
INSERT INTO "LINES" VALUES(4016,3,42,1);
INSERT INTO "LINES" VALUES(4017,3,43,1);
INSERT INTO "LINES" VALUES(4018,3,44,1);
INSERT INTO "LINES" VALUES(4019,3,45,1);
INSERT INTO "LINES" VALUES(4020,15,87,33);
INSERT INTO "LINES" VALUES(4021,15,86,32);
INSERT INTO "LINES" VALUES(4022,15,85,31);
INSERT INTO "LINES" VALUES(4023,15,84,30);
INSERT INTO "LINES" VALUES(4024,15,83,31);
INSERT INTO "LINES" VALUES(4025,15,82,31);
INSERT INTO "LINES" VALUES(4026,15,81,31);
INSERT INTO "LINES" VALUES(4027,15,80,29);
INSERT INTO "LINES" VALUES(4028,15,79,28);
INSERT INTO "LINES" VALUES(4029,15,78,27);
INSERT INTO "LINES" VALUES(4030,15,77,28);
INSERT INTO "LINES" VALUES(4031,15,76,28);
INSERT INTO "LINES" VALUES(4032,15,75,28);
INSERT INTO "LINES" VALUES(4033,15,74,28);
INSERT INTO "LINES" VALUES(4034,15,73,28);
INSERT INTO "LINES" VALUES(4035,15,72,26);
INSERT INTO "LINES" VALUES(4036,15,71,25);
INSERT INTO "LINES" VALUES(4037,15,70,24);
INSERT INTO "LINES" VALUES(4038,15,69,23);
INSERT INTO "LINES" VALUES(4039,15,68,22);
INSERT INTO "LINES" VALUES(4040,15,67,21);
INSERT INTO "LINES" VALUES(4041,15,66,20);
INSERT INTO "LINES" VALUES(4042,15,65,19);
INSERT INTO "LINES" VALUES(4043,15,64,18);
INSERT INTO "LINES" VALUES(4044,15,63,17);
INSERT INTO "LINES" VALUES(4045,15,62,16);
INSERT INTO "LINES" VALUES(4046,15,61,15);
INSERT INTO "LINES" VALUES(4047,15,60,14);
INSERT INTO "LINES" VALUES(4048,15,59,13);
INSERT INTO "LINES" VALUES(4049,15,58,12);
INSERT INTO "LINES" VALUES(4050,15,57,11);
INSERT INTO "LINES" VALUES(4051,15,56,10);
INSERT INTO "LINES" VALUES(4052,15,55,9);
INSERT INTO "LINES" VALUES(4053,15,54,8);
INSERT INTO "LINES" VALUES(4054,15,53,7);
INSERT INTO "LINES" VALUES(4055,15,52,6);
INSERT INTO "LINES" VALUES(4056,15,51,5);
INSERT INTO "LINES" VALUES(4057,15,50,4);
INSERT INTO "LINES" VALUES(4058,15,49,3);
INSERT INTO "LINES" VALUES(4059,15,48,2);
INSERT INTO "LINES" VALUES(4060,15,47,1);
INSERT INTO "LINES" VALUES(4061,15,46,1);
INSERT INTO "LINES" VALUES(4062,15,1,1);
INSERT INTO "LINES" VALUES(4063,15,2,1);
INSERT INTO "LINES" VALUES(4064,15,3,1);
INSERT INTO "LINES" VALUES(4065,15,4,1);
INSERT INTO "LINES" VALUES(4066,15,5,1);
INSERT INTO "LINES" VALUES(4067,15,6,1);
INSERT INTO "LINES" VALUES(4068,15,7,1);
INSERT INTO "LINES" VALUES(4069,15,8,1);
INSERT INTO "LINES" VALUES(4070,15,9,1);
INSERT INTO "LINES" VALUES(4071,15,10,1);
INSERT INTO "LINES" VALUES(4072,15,11,1);
INSERT INTO "LINES" VALUES(4073,15,12,1);
INSERT INTO "LINES" VALUES(4074,15,13,1);
INSERT INTO "LINES" VALUES(4075,15,14,1);
INSERT INTO "LINES" VALUES(4076,15,15,1);
INSERT INTO "LINES" VALUES(4077,15,16,1);
INSERT INTO "LINES" VALUES(4078,15,17,1);
INSERT INTO "LINES" VALUES(4079,15,18,1);
INSERT INTO "LINES" VALUES(4080,15,19,1);
INSERT INTO "LINES" VALUES(4081,15,20,1);
INSERT INTO "LINES" VALUES(4082,15,21,1);
INSERT INTO "LINES" VALUES(4083,15,22,1);
INSERT INTO "LINES" VALUES(4084,15,23,1);
INSERT INTO "LINES" VALUES(4085,15,24,1);
INSERT INTO "LINES" VALUES(4086,15,25,1);
INSERT INTO "LINES" VALUES(4087,15,26,1);
INSERT INTO "LINES" VALUES(4088,15,27,1);
INSERT INTO "LINES" VALUES(4089,15,28,1);
INSERT INTO "LINES" VALUES(4090,15,29,1);
INSERT INTO "LINES" VALUES(4091,15,30,1);
INSERT INTO "LINES" VALUES(4092,15,31,1);
INSERT INTO "LINES" VALUES(4093,15,32,1);
INSERT INTO "LINES" VALUES(4094,15,33,1);
INSERT INTO "LINES" VALUES(4095,15,34,1);
INSERT INTO "LINES" VALUES(4096,15,35,1);
INSERT INTO "LINES" VALUES(4097,15,36,1);
INSERT INTO "LINES" VALUES(4098,15,37,1);
INSERT INTO "LINES" VALUES(4099,15,38,1);
INSERT INTO "LINES" VALUES(4100,15,39,1);
INSERT INTO "LINES" VALUES(4101,15,40,1);
INSERT INTO "LINES" VALUES(4102,15,41,1);
INSERT INTO "LINES" VALUES(4103,15,42,1);
INSERT INTO "LINES" VALUES(4104,15,43,1);
INSERT INTO "LINES" VALUES(4105,15,44,1);
INSERT INTO "LINES" VALUES(4106,15,45,1);
INSERT INTO "LINES" VALUES(4107,6,55,1);
INSERT INTO "LINES" VALUES(4108,6,54,1);
INSERT INTO "LINES" VALUES(4109,6,53,1);
INSERT INTO "LINES" VALUES(4110,6,52,1);
INSERT INTO "LINES" VALUES(4111,6,51,1);
INSERT INTO "LINES" VALUES(4112,6,50,1);
INSERT INTO "LINES" VALUES(4113,6,49,1);
INSERT INTO "LINES" VALUES(4114,6,48,1);
INSERT INTO "LINES" VALUES(4115,6,47,1);
INSERT INTO "LINES" VALUES(4116,6,46,1);
INSERT INTO "LINES" VALUES(4117,6,1,1);
INSERT INTO "LINES" VALUES(4118,6,2,1);
INSERT INTO "LINES" VALUES(4119,6,3,1);
INSERT INTO "LINES" VALUES(4120,6,4,1);
INSERT INTO "LINES" VALUES(4121,6,5,1);
INSERT INTO "LINES" VALUES(4122,6,6,1);
INSERT INTO "LINES" VALUES(4123,6,7,1);
INSERT INTO "LINES" VALUES(4124,6,8,1);
INSERT INTO "LINES" VALUES(4125,6,9,1);
INSERT INTO "LINES" VALUES(4126,6,10,1);
INSERT INTO "LINES" VALUES(4127,6,11,1);
INSERT INTO "LINES" VALUES(4128,6,12,1);
INSERT INTO "LINES" VALUES(4129,6,13,1);
INSERT INTO "LINES" VALUES(4130,6,14,1);
INSERT INTO "LINES" VALUES(4131,6,15,1);
INSERT INTO "LINES" VALUES(4132,6,16,1);
INSERT INTO "LINES" VALUES(4133,6,17,1);
INSERT INTO "LINES" VALUES(4134,6,18,1);
INSERT INTO "LINES" VALUES(4135,6,19,1);
INSERT INTO "LINES" VALUES(4136,6,20,1);
INSERT INTO "LINES" VALUES(4137,6,21,1);
INSERT INTO "LINES" VALUES(4138,6,22,1);
INSERT INTO "LINES" VALUES(4139,6,23,1);
INSERT INTO "LINES" VALUES(4140,6,24,1);
INSERT INTO "LINES" VALUES(4141,6,25,1);
INSERT INTO "LINES" VALUES(4142,6,26,1);
INSERT INTO "LINES" VALUES(4143,6,27,1);
INSERT INTO "LINES" VALUES(4144,6,28,1);
INSERT INTO "LINES" VALUES(4145,6,29,1);
INSERT INTO "LINES" VALUES(4146,6,30,1);
INSERT INTO "LINES" VALUES(4147,6,31,1);
INSERT INTO "LINES" VALUES(4148,6,32,1);
INSERT INTO "LINES" VALUES(4149,6,33,1);
INSERT INTO "LINES" VALUES(4150,6,34,1);
INSERT INTO "LINES" VALUES(4151,6,35,1);
INSERT INTO "LINES" VALUES(4152,6,36,1);
INSERT INTO "LINES" VALUES(4153,6,37,1);
INSERT INTO "LINES" VALUES(4154,6,38,1);
INSERT INTO "LINES" VALUES(4155,6,39,1);
INSERT INTO "LINES" VALUES(4156,6,40,1);
INSERT INTO "LINES" VALUES(4157,6,41,1);
INSERT INTO "LINES" VALUES(4158,6,42,1);
INSERT INTO "LINES" VALUES(4159,6,43,1);
INSERT INTO "LINES" VALUES(4160,6,44,1);
INSERT INTO "LINES" VALUES(4161,6,45,1);
CREATE TABLE `LINES_REPLACEMENTS` (`line_id`  INTEGER NOT NULL,`replacement_id`  INTEGER NOT NULL,PRIMARY KEY(line_id, replacement_id), FOREIGN KEY(`line_id`) REFERENCES LINES(id), FOREIGN KEY(`replacement_id`) REFERENCES REPLACEMENTS(id) );
CREATE TABLE `RELATIONS` (`file_id`  INTEGER NOT NULL,`dep_id`   INTEGER NOT NULL,`dependency_timestamp` DATETIME NOT NULL,PRIMARY KEY(file_id, dep_id), FOREIGN KEY(`file_id`) REFERENCES FILES(id), FOREIGN KEY(`dep_id`) REFERENCES FILES(id) );
INSERT INTO "RELATIONS" VALUES(7,8,1427729547);
INSERT INTO "RELATIONS" VALUES(7,9,1427729577);
INSERT INTO "RELATIONS" VALUES(7,12,1427220376);
INSERT INTO "RELATIONS" VALUES(7,13,1427397043);
INSERT INTO "RELATIONS" VALUES(10,9,1427729577);
INSERT INTO "RELATIONS" VALUES(10,11,1427218446);
INSERT INTO "RELATIONS" VALUES(10,12,1427220376);
INSERT INTO "RELATIONS" VALUES(10,14,1427214610);
INSERT INTO "RELATIONS" VALUES(17,9,1427729577);
INSERT INTO "RELATIONS" VALUES(17,18,1427461573);
INSERT INTO "RELATIONS" VALUES(17,12,1427220376);
INSERT INTO "RELATIONS" VALUES(17,19,1427212284);
CREATE TABLE `REPLACEMENTS` (`id`  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`file_id`   INTEGER NOT NULL,`start_line` INTEGER NOT NULL,`lines_replaced` INTEGER NOT NULL,`lines_in_replacement` INTEGER NOT NULL,`comes_from_start_line` INTEGER NOT NULL,`comes_from_end_line` INTEGER NOT NULL,`comes_from_file_id` INTEGER NOT NULL,`transformation_id` INTEGER NOT NULL,`unhandled` INTEGER DEFAULT(1),`replacement_text` TEXT NOT NULL,FOREIGN KEY(`file_id`) REFERENCES FILES(id), FOREIGN KEY(`comes_from_file_id`) REFERENCES FILES(id), FOREIGN KEY(`transformation_id`) REFERENCES TRANSFORMATIONS(id) );
INSERT INTO "REPLACEMENTS" VALUES(1,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(2,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(3,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(4,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(5,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(6,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(7,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(8,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(9,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(10,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(11,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(12,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(13,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(14,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(15,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(16,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(17,15,26,0,5,26,26,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(18,15,29,0,3,29,29,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(19,15,30,0,0,30,30,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(20,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(21,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(22,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(23,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(24,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(25,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(26,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(27,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(28,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(29,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(30,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(31,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(32,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(33,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(34,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(35,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(36,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(37,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(38,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(39,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(40,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(41,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(42,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(43,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(44,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(45,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(46,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(47,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(48,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(49,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(50,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(51,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(52,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(53,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(54,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(55,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(56,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(57,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(58,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(59,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(60,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(61,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(62,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(63,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(64,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(65,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(66,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(67,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(68,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(69,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(70,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(71,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(72,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(73,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(74,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(75,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(76,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(77,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(78,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(79,16,1,0,45,1,1,16,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(80,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(81,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(82,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(83,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(84,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(85,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(86,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(87,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(88,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(89,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(90,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(91,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(92,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(93,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(94,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(95,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(96,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(97,1,23,0,5,23,23,1,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(98,1,26,0,3,26,26,1,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(99,1,27,0,0,27,27,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(100,1,28,0,0,28,28,1,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(101,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(102,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(103,2,1,0,45,1,1,2,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(104,1,1,0,45,1,1,1,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(105,3,16,0,0,16,16,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(106,3,19,0,0,19,19,3,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(107,3,20,0,0,20,20,3,1,0,'char ');
INSERT INTO "REPLACEMENTS" VALUES(108,3,21,0,0,21,21,3,1,0,'unsigned int ');
INSERT INTO "REPLACEMENTS" VALUES(109,15,24,0,0,24,24,15,1,0,'int ');
INSERT INTO "REPLACEMENTS" VALUES(110,15,28,0,5,28,28,15,1,0,'{
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __begin = (myVec).begin();
std::_Vector_iterator<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > __end = (myVec).end();
for(;__begin != __end; ++ __begin) {
std::basic_string<char, std::char_traits<char>, std::allocator<char> > s = *__begin;
');
INSERT INTO "REPLACEMENTS" VALUES(111,15,31,0,3,31,31,15,1,0,'
}
}
');
INSERT INTO "REPLACEMENTS" VALUES(112,6,1,0,45,1,1,6,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(113,3,1,0,45,1,1,3,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(114,16,1,0,45,1,1,16,9,1,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
INSERT INTO "REPLACEMENTS" VALUES(115,15,1,0,45,1,1,15,9,0,'
/*1000000001*/

/*BACKPORT MOVE TOOLS BEGIN*/

#ifndef BACKPORT_MOVE_TOOLS_DEFINED

#define BACKPORT_MOVE_TOOLS_DEFINED
namespace backport {

template<class T> class rv {

private:

T _placeholder;

rv();

~rv();

rv(rv const&);

void operator=(rv const&);

};

template<class T>

rv<T>& move(T const &x)

{ return *reinterpret_cast<rv<T> *>(reinterpret_cast<T*>(&const_cast<char &>(reinterpret_cast<const volatile char &>(static_cast<T const &>(x))))); }

template<class T>

rv<T>& move(rv<T> &x)

{ return x; }

}

#endif // not defined BACKPORT_MOVE_TOOLS_DEFINED



/*BACKPORT MOVE TOOLS END*/
');
CREATE TABLE `TRANSFORMATIONS` (`id`  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,`name` TEXT NOT NULL);
INSERT INTO "TRANSFORMATIONS" VALUES(1,'MultipleTransforms');
INSERT INTO "TRANSFORMATIONS" VALUES(9,'ReplaceRvalueRef');
DELETE FROM "sqlite_sequence";
INSERT INTO "sqlite_sequence" VALUES('FILES',19);
INSERT INTO "sqlite_sequence" VALUES('LINES',4161);
INSERT INTO "sqlite_sequence" VALUES('TRANSFORMATIONS',115);
INSERT INTO "sqlite_sequence" VALUES('REPLACEMENTS',115);
CREATE UNIQUE INDEX FILES_INDEX ON FILES (path);
CREATE UNIQUE INDEX FILES_INDEX_ID ON FILES (id);
CREATE UNIQUE INDEX COMP_UNIT_INDEX ON COMPILATION_UNIT (id);
CREATE INDEX RELATIONS_INDEX ON RELATIONS (file_id, dep_id);
CREATE UNIQUE INDEX TRANSFORMATIONS_INDEX_NAME ON TRANSFORMATIONS (name);
CREATE UNIQUE INDEX TRANSFORMATIONS_INDEX_ID ON TRANSFORMATIONS (id);
CREATE UNIQUE INDEX REPLACEMENT_INDEX_4 ON REPLACEMENTS (id, file_id, start_line, lines_replaced, replacement_text);
CREATE UNIQUE INDEX REPLACEMENT_INDEX_1 ON REPLACEMENTS (id);
CREATE INDEX REPLACEMENT_INDEX_3 ON REPLACEMENTS (transformation_id);
CREATE INDEX REPLACEMENT_INDEX_2 ON REPLACEMENTS (file_id);
CREATE UNIQUE INDEX LINES_INDEX_FILE_ID_LINE ON LINES (file_id, line);
CREATE UNIQUE INDEX LINES_INDEX_ID ON LINES (id);
CREATE UNIQUE INDEX LINES_REPLACEMENTS_INDEX_LINE_ID_REPLACEMENT_ID ON LINES_REPLACEMENTS (line_id, replacement_id);
CREATE INDEX LINES_REPLACEMENTS_INDEX_REPLACEMENT_ID ON LINES_REPLACEMENTS (replacement_id);
CREATE INDEX LINES_REPLACEMENTS_INDEX_ID ON LINES_REPLACEMENTS (line_id);
COMMIT;